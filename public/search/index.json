[{"content":"Redisson 可重入锁原理详解 1. 为什么需要可重入锁？ 在日常开发中，锁 是保证线程安全的重要手段。但有时候，一个线程在持有锁时，会调用另一个也需要同一把锁的方法，这时问题就来了：\n如果锁 不可重入，线程在第二次尝试加锁时会失败，因为锁已经存在，它相当于 把自己卡死了。 如果锁 可重入，同一个线程可以多次获取这把锁，直到最后释放时才真正解锁。 所以，可重入锁的意义在于：避免同一线程因为方法嵌套调用而死锁。\n2. 普通分布式锁的问题 最简单的分布式锁通常用 Redis 的 SETNX 实现：\n1 SET key value NX EX 30 NX 表示如果 key 不存在才设置，保证原子性。 EX 30 设置过期时间，防止死锁。 问题出在哪里？ 当一个线程已经持有锁时，如果在方法嵌套中再次尝试获取锁：\nRedis 发现 key 已存在，直接返回失败。 虽然是 同一个线程 想再次获取锁，但因为锁实现里只区分 \u0026ldquo;有锁 / 无锁\u0026rdquo;，并不会识别线程。 结果就是：自己把自己锁死了。 3. Redisson 的改进（可重入实现） Redisson 在 value 的存储上做了改进，它并不是简单的字符串，而是一个 Hash 结构：\n1 2 3 lockKey -\u0026gt; { threadId : reentrantCount } threadId：唯一标识某个 JVM 里的某个线程（一般是 UUID:threadId）。 reentrantCount：记录这个线程持有锁的次数。 这样就可以支持 可重入 了。\n4. 执行流程举例 假设我们有两个方法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public void methodA() { lock.lock(); try { methodB(); } finally { lock.unlock(); } } public void methodB() { lock.lock(); try { // 执行逻辑 } finally { lock.unlock(); } } 4.1 第一次加锁（methodA） Redis 里还没有 lockKey。 Redisson 会写入： 1 lockKey -\u0026gt; { \u0026#34;UUID:thread-1\u0026#34; : 1 } 表示线程 thread-1 第一次获取锁，重入次数 = 1。 4.2 第二次加锁（methodB） Redis 发现 lockKey 已存在，但 owner 是 同一个线程。 允许重入，计数 +1： 1 lockKey -\u0026gt; { \u0026#34;UUID:thread-1\u0026#34; : 2 } 4.3 methodB 执行完释放锁 调用 unlock()，计数 -1： 1 lockKey -\u0026gt; { \u0026#34;UUID:thread-1\u0026#34; : 1 } 锁仍然由当前线程持有。 4.4 methodA 执行完释放锁 再次调用 unlock()，计数 -1 → 变成 0。 Redisson 删除 lockKey： 1 lockKey 删除 此时锁才真正释放，其他线程才有机会获取。 5. 通俗解释 用通俗的话再描述一次：\n假如一个线程调用多个方法时，第一个方法用了锁去调用第二个方法，第二个方法再次调用这个线程的锁就会失败。因为虽然锁的 key 一样，但是第二次获取锁的时候会发现锁已经存在了，就获取失败。\nRedisson 在这个基础上做了改进：它在锁的 value 里加上了一个 重入次数，并利用 Redis Hash 结构来存储。\nHash 结构里有两个值：\nfield：当前线程的标识（UUID + threadId） value：重入次数 执行过程是这样的：\n方法一第一次获取锁：重入次数 +1，变成 1 方法一调用方法二，方法二又要用锁：重入次数再 +1，变成 2 方法二执行完释放锁：重入次数 -1，变回 1 方法一执行完释放锁：重入次数 -1，变回 0，锁才真正释放 这样就避免了同一个线程因为嵌套调用而死锁。\n6. 核心实现原理 6.1 加锁流程 1 2 3 4 5 6 7 8 9 10 11 12 -- 加锁脚本 if (redis.call(\u0026#39;exists\u0026#39;, KEYS[1]) == 0) then redis.call(\u0026#39;hset\u0026#39;, KEYS[1], ARGV[2], 1); redis.call(\u0026#39;pexpire\u0026#39;, KEYS[1], ARGV[1]); return nil; end; if (redis.call(\u0026#39;hexists\u0026#39;, KEYS[1], ARGV[2]) == 1) then redis.call(\u0026#39;hincrby\u0026#39;, KEYS[1], ARGV[2], 1); redis.call(\u0026#39;pexpire\u0026#39;, KEYS[1], ARGV[1]); return nil; end; return redis.call(\u0026#39;pttl\u0026#39;, KEYS[1]); 6.2 释放锁流程 1 2 3 4 5 6 7 8 9 10 11 12 13 -- 释放锁脚本 if (redis.call(\u0026#39;hexists\u0026#39;, KEYS[1], ARGV[3]) == 0) then return nil; end; local counter = redis.call(\u0026#39;hincrby\u0026#39;, KEYS[1], ARGV[3], -1); if (counter \u0026gt; 0) then redis.call(\u0026#39;pexpire\u0026#39;, KEYS[1], ARGV[2]); return 0; else redis.call(\u0026#39;del\u0026#39;, KEYS[1]); redis.call(\u0026#39;publish\u0026#39;, KEYS[2], ARGV[1]); return 1; end; 7. 关键特性 7.1 线程安全 使用 Lua 脚本保证原子性 避免竞态条件 7.2 自动续期 通过 pexpire 自动续期 防止业务执行时间过长导致锁过期 7.3 公平性 支持公平锁和非公平锁 通过队列机制保证获取锁的顺序 7.4 可重入性 同一线程可多次获取锁 通过重入计数器实现 8. 使用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // 获取可重入锁 RLock lock = redisson.getLock(\u0026#34;myLock\u0026#34;); try { // 尝试加锁，最多等待100秒，上锁以后10秒自动解锁 boolean res = lock.tryLock(100, 10, TimeUnit.SECONDS); if (res) { try { // 业务逻辑 doSomething(); } finally { lock.unlock(); } } } catch (InterruptedException e) { e.printStackTrace(); } 9. 总结升华 普通分布式锁只关心 \u0026ldquo;有锁 / 无锁\u0026rdquo;，不关心是谁加的锁，导致 同一线程重入时也会失败。\nRedisson 通过在 Redis 的 Hash 结构 中记录 \u0026ldquo;线程标识 + 重入计数\u0026rdquo;，让锁具备了 可重入能力。\n意义：可重入锁避免了一个线程在嵌套调用中把自己卡死，同时对外仍然保持分布式锁的特性。\n一句话总结： Redisson 的可重入锁，本质上就是用 Redis Hash 存储线程 ID 和重入次数，直到重入次数归零才真正释放锁。\n10. 扩展阅读 Redisson 官方文档 Redis 分布式锁最佳实践 Java 并发编程实战 本文档详细介绍了 Redisson 可重入锁的实现原理，帮助开发者深入理解分布式锁的核心机制。\n","date":"2025-09-14T00:00:00Z","permalink":"https://Yin123-ybh.github.io/p/redisson-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/","title":"Redisson 可重入锁原理详解"},{"content":"深入理解 Redis + Lua 在秒杀系统中的应用 在高并发场景下，尤其是秒杀系统，如何保证库存扣减的正确性和用户限购的准确性，是一个非常经典的问题。\n本文将通过一个完整的案例，详细讲解 Redis + Lua 脚本 在秒杀活动中的使用方式。\n一、背景介绍 在秒杀场景中，如果单纯依赖后端数据库进行库存扣减与用户校验，往往会产生以下问题：\n高并发下数据库压力过大：大量用户同时下单，数据库容易被打爆。 超卖问题：多个线程并发操作时，可能会出现库存被扣成负数的情况。 限购逻辑失效：如果并发控制不好，同一用户可能绕过限购限制。 为了解决这些问题，我们通常会 将秒杀的核心逻辑放到 Redis 里，利用 Redis 的高性能与 Lua 脚本的原子性，来保证数据一致性。\n二、Redis Key 设计 在这个秒杀系统中，我们为每个活动设计了两个关键的 Redis Key：\n1. 库存 Key 1 seckill:stock:{activityId} 作用：存放某个活动的剩余库存数量。\n示例：\n1 SET seckill:stock:1001 50 表示活动 1001 还有 50 件商品。\n2. 参与用户 Key 1 seckill:participants:{activityId} 作用：存放某个活动所有用户的购买记录（哈希表）。\n示例：\n1 2 HSET seckill:participants:1001 12345 1 HSET seckill:participants:1001 67890 2 表示：\n用户 12345 已经购买 1 件 用户 67890 已经购买 2 件 三、Java 代码调用 Lua 脚本 在后端中，调用 Lua 脚本的方式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 String stockKey = seckillPrefix + \u0026#34;stock:\u0026#34; + activityId; String participantsKey = seckillPrefix + \u0026#34;participants:\u0026#34; + activityId; DefaultRedisScript\u0026lt;List\u0026gt; script = new DefaultRedisScript\u0026lt;\u0026gt;(); script.setScriptSource(new ResourceScriptSource(new ClassPathResource(\u0026#34;seckill_participate.lua\u0026#34;))); script.setResultType(List.class); List\u0026lt;String\u0026gt; keys = Arrays.asList(stockKey, participantsKey); List\u0026lt;Object\u0026gt; args = Arrays.asList( userId.toString(), quantity.toString(), activity.getPerUserLimit().toString() ); List result = redisTemplate.execute(script, keys, args.toArray()); 参数传递说明 这里需要重点理解的有两部分：\nkeys → 传递给 Lua 的 Redis Key，脚本里用 KEYS[] 访问：\nKEYS[1] = \u0026quot;seckill:stock:1001\u0026quot; （这个活动的库存） KEYS[2] = \u0026quot;seckill:participants:1001\u0026quot; （记录了这个活动所有用户的购买记录） args → 附加参数，脚本里用 ARGV[] 访问：\nARGV[1] = userId （当前用户 ID） ARGV[2] = quantity （本次购买数量） ARGV[3] = perUserLimit （每人限购数量） 四、Lua 脚本逻辑详解 Lua 脚本具有原子性，在 Redis 中执行时不会被打断，非常适合秒杀场景。\n典型的 seckill_participate.lua 脚本如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 -- 获取参数 local stock = tonumber(redis.call(\u0026#34;GET\u0026#34;, KEYS[1])) local userId = ARGV[1] local quantity = tonumber(ARGV[2]) local perUserLimit = tonumber(ARGV[3]) -- 查询用户已购买数量 local userBought = tonumber(redis.call(\u0026#34;HGET\u0026#34;, KEYS[2], userId) or \u0026#34;0\u0026#34;) -- 1. 校验是否超过个人限购 if userBought + quantity \u0026gt; perUserLimit then return {0, \u0026#34;超过个人限购\u0026#34;} end -- 2. 校验库存是否足够 if stock \u0026lt; quantity then return {0, \u0026#34;库存不足\u0026#34;} end -- 3. 扣减库存 redis.call(\u0026#34;DECRBY\u0026#34;, KEYS[1], quantity) -- 4. 更新用户购买数量 redis.call(\u0026#34;HINCRBY\u0026#34;, KEYS[2], userId, quantity) -- 5. 返回成功 return {1, \u0026#34;成功\u0026#34;} 脚本执行流程详解 让我们逐步分析这个脚本的执行过程：\n1. 参数接收 1 2 3 local userId = ARGV[1] -- 接收用户ID local quantity = tonumber(ARGV[2]) -- 接收购买数量 local perUserLimit = tonumber(ARGV[3]) -- 接收限购数量 后端通过 redisTemplate.execute(...) 传入这些 ARGV 参数给 Lua 脚本，脚本接收每个参数。\n2. 查询用户购买记录 1 local userBought = tonumber(redis.call(\u0026#34;HGET\u0026#34;, KEYS[2], userId) or \u0026#34;0\u0026#34;) 这段代码的作用：查询当前 userId 的购买记录。\n原理：因为传入了 participantsKey（这个活动的用户购买记录）和 userId（这个用户），就可以根据 userId 在 participantsKey 里面查出对应的用户购买记录。\n3. 限购校验 1 2 3 if userBought + quantity \u0026gt; perUserLimit then return {0, \u0026#34;超过个人限购\u0026#34;} end 判断逻辑：用户目前已购买数 + 新购买数 quantity 是否大于最大购买量 perUserLimit。\n如果是，返回 {0, \u0026quot;超过个人限购\u0026quot;} 如果不是，继续下一步 4. 库存校验 1 2 3 if stock \u0026lt; quantity then return {0, \u0026#34;库存不足\u0026#34;} end 检查库存是否足够，如果不够，则返回 {0, \u0026quot;库存不足\u0026quot;}。\n5. 执行购买操作 1 2 3 4 5 -- 扣减库存 redis.call(\u0026#34;DECRBY\u0026#34;, KEYS[1], quantity) -- 记录用户购买数量 redis.call(\u0026#34;HINCRBY\u0026#34;, KEYS[2], userId, quantity) 如果库存足够，则：\n扣减库存：DECRBY 命令将库存减少 quantity 数量 记录用户购买数量：HINCRBY 命令将用户的购买记录增加 quantity 数量 6. 返回成功 1 return {1, \u0026#34;成功\u0026#34;} 最后返回 {1, \u0026quot;成功\u0026quot;}，表示购买成功。\n五、执行流程示例 我们以用户 12345 参与活动 1001 为例，假设初始库存为 10，限购为 3：\n第一次购买（买 2 件） 输入参数：\nKEYS[1] = seckill:stock:1001 KEYS[2] = seckill:participants:1001 ARGV[1] = \u0026quot;12345\u0026quot; ARGV[2] = \u0026quot;2\u0026quot; ARGV[3] = \u0026quot;3\u0026quot; 脚本执行：\nuserBought = 0（没买过） stock = 10，足够 扣减库存：DECRBY seckill:stock:1001 2 → 库存变 8 更新购买记录：HINCRBY seckill:participants:1001 12345 2 → 用户买了 2 件 返回 {1, \u0026quot;成功\u0026quot;} 第二次购买（再买 2 件） 输入参数：\nARGV[1] = \u0026quot;12345\u0026quot; ARGV[2] = \u0026quot;2\u0026quot; ARGV[3] = \u0026quot;3\u0026quot; 脚本执行：\nuserBought = 2（上次买了 2 件） 本次要买 2 件，总数 = 4 \u0026gt; 限购 3 返回 {0, \u0026quot;超过个人限购\u0026quot;} 六、核心优势 通过 Redis Key 设计 + Lua 脚本原子执行，我们实现了以下目标：\n1. 防止超卖 库存扣减和用户购买记录更新在同一个脚本里完成，保证了原子性。\n2. 限购控制 利用哈希表存储用户购买记录，结合 Lua 脚本校验，避免了用户绕过限购。\n3. 高并发性能 逻辑全部在 Redis 内部执行，不依赖数据库事务，性能极高。\n4. 数据一致性 Lua 脚本的原子性保证了所有操作要么全部成功，要么全部失败。\n七、实际应用场景 这种方式是很多电商平台在秒杀场景中的标准做法，也是分布式系统里常见的\u0026quot;数据库削峰\u0026quot;与\u0026quot;Redis 限流\u0026quot;的结合应用。\n适用场景 秒杀活动 限时抢购 限量商品销售 优惠券发放 积分兑换 技术特点 高性能：Redis 内存操作，响应速度快 原子性：Lua 脚本保证操作原子性 可扩展：支持分布式部署 可靠性：避免超卖和重复购买 八、延伸思考 1. 退款退货支持 如果要支持退款退货，需要在 Lua 脚本里增加库存回滚逻辑：\n1 2 3 4 -- 退款时回滚库存 redis.call(\u0026#34;INCRBY\u0026#34;, KEYS[1], quantity) -- 减少用户购买记录 redis.call(\u0026#34;HINCRBY\u0026#34;, KEYS[2], userId, -quantity) 2. 分片存储优化 如果活动商品数量非常大，可以考虑分片存储库存，进一步提高并发性能：\n1 2 -- 根据用户ID进行分片 local shardKey = \u0026#34;seckill:stock:\u0026#34; .. activityId .. \u0026#34;:\u0026#34; .. (userId % 10) 3. 异步处理 在真实生产环境中，还需要配合消息队列（MQ）和异步下单，以保证后续数据库写入的可靠性。 详情可前往此处了解https://yin123-ybh.github.io/p/异步秒杀系统深度解析含redis预扣库存与消息队列实现/\n4. 监控和告警 监控 Redis 性能指标 设置库存告警阈值 记录用户购买行为日志 九、总结 Redis + Lua 脚本在秒杀系统中的应用，通过以下方式解决了高并发场景下的核心问题：\n利用 Redis 的高性能：将核心逻辑从数据库转移到内存 保证操作的原子性：Lua 脚本确保所有操作要么全部成功，要么全部失败 实现精确的限购控制：通过哈希表记录用户购买历史 避免超卖问题：库存扣减和用户记录更新在同一脚本中完成 这种方案不仅适用于秒杀系统，在需要高并发、强一致性的场景中都有广泛应用价值。\n以上就是关于秒杀系统中 Redis + Lua 脚本的完整应用解析。通过深入理解这些核心概念，你就能在实际项目中灵活运用这些技术，构建出高性能、高可靠的分布式系统。\n","date":"2025-09-14T00:00:00Z","permalink":"https://Yin123-ybh.github.io/p/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-redis--lua-%E5%9C%A8%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","title":"深入理解 Redis + Lua 在秒杀系统中的应用"},{"content":"异步秒杀系统深度解析（含Redis预扣库存与消息队列实现） 秒杀系统是电商高并发场景的典型应用，短时间内大量用户同时抢购有限商品，如何保证库存不超卖、系统高可用、响应快速，是技术设计的核心问题。本文将结合异步秒杀思路、Redis库存预扣、消息队列、前后端解耦等技术点，深入讲解秒杀系统的设计与实现，并用类比和流程解析，帮助你理解高并发处理背后的原理。\n1️⃣ 秒杀场景问题分析 秒杀场景主要有以下特点：\n高并发：短时间内成千上万用户抢购同一商品 库存有限：商品数量有限，必须严格控制 系统压力大：数据库和应用服务可能成为性能瓶颈 常见问题： 超卖：库存被多次扣减，卖出超过实际数量 数据库压力大：大量请求直接打到数据库，容易导致宕机 网络延迟和响应慢：用户体验差 并发事务冲突：普通锁或事务可能成为性能瓶颈 问题代码示例（错误实现） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // ❌ 错误实现：直接操作数据库，容易超卖 @RestController public class SeckillController { @Autowired private ProductService productService; @Autowired private OrderService orderService; @PostMapping(\u0026#34;/seckill\u0026#34;) public Result seckill(@RequestParam Long productId, @RequestParam Long userId) { // 1. 查询库存 Product product = productService.getById(productId); if (product.getStock() \u0026lt;= 0) { return Result.fail(\u0026#34;库存不足\u0026#34;); } // 2. 扣减库存 - 这里可能出现超卖！ product.setStock(product.getStock() - 1); productService.updateById(product); // 3. 创建订单 Order order = new Order(); order.setProductId(productId); order.setUserId(userId); orderService.save(order); return Result.success(\u0026#34;秒杀成功\u0026#34;); } } 2️⃣ 同步 vs 异步秒杀 秒杀处理可以分为两种模式：\n方式 用户请求 后端处理 优缺点 同步 用户请求直接调用数据库 立即处理库存和订单 高并发下数据库压力大，容易阻塞，超卖风险高 异步 用户请求先进入队列或缓存 后台异步消费队列，依次处理库存和订单 快速响应用户，削峰填谷，防止超卖 核心区别： 同步模式：前端等待后端完成所有操作 异步模式：前端请求先排队，后台慢慢处理业务，请求处理与业务逻辑解耦 3️⃣ 异步秒杀核心思路 异步秒杀通过以下流程实现高并发处理：\n步骤 1：接收请求（接口层） 用户点击秒杀按钮，前端请求秒杀接口。\n接口层快速判断：\n商品是否还有库存 用户是否已经下单 判断通过：\n使用 Redis + Lua 脚本进行库存预扣（原子操作） 生成订单 ID 或请求 ID 将请求封装成消息放入消息队列（RabbitMQ、Kafka、Redis Stream 等） 接口立即返回给前端：\n\u0026ldquo;排队成功\u0026quot;或\u0026quot;请求已接收\u0026rdquo; ⚡ 注意：前端用户此时并未直接拿到最终订单，只是拿到一个\u0026quot;抢购凭证\u0026quot;。\n步骤 2：异步处理请求（后台服务） 消费消息队列：\n扣数据库库存 创建订单记录 标记用户已下单 处理完成后通知用户：\n秒杀成功（订单生成成功） 秒杀失败（库存不足） 步骤 3：库存控制 Redis库存预减：\n秒杀前，将商品库存加载到 Redis 用户请求时，用 Redis 原子操作 DECR 扣减库存 扣减成功 → 放入消息队列 扣减失败 → 秒杀结束，返回失败 可使用 Lua 脚本将 判断库存 \u0026gt; 0 + 扣减库存 做成原子操作，避免超卖\n步骤 4：用户通知 秒杀结果异步返回：\n轮询接口 WebSocket 消息推送 前端用户拿到最终结果后，确认是否抢购成功\n4️⃣ 接口层快速判断库存与用户资格 接口层为什么可以快速判断库存和用户是否符合下单要求？核心是提前把关键数据缓存在 Redis：\n4.1 库存判断 秒杀开始前，将商品库存加载到 Redis：\n1 2 Key: \u0026#34;stock:商品ID\u0026#34; Value: 剩余库存数量 请求到来时：\n1 DECR stock:商品ID // 原子操作 返回值判断：\n≥0 → 库存还有，允许下单 \u0026lt;0 → 库存不足，秒杀结束 Lua 脚本可将\u0026quot;判断库存 + 扣减库存\u0026quot;原子化处理，避免超卖\n4.2 用户是否已下单 每位用户只能下单一次：\n1 2 Key: \u0026#34;order:用户ID:商品ID\u0026#34; Value: 1 // 已下单 接口层判断：\n1 2 EXISTS order:用户ID:商品ID → 已下单，拒绝 不存在 → 允许加入队列 ✅ 通过 Redis 判断库存与用户状态，实现秒杀接口快速响应，避免高并发直接打数据库。\n4.3 接口层完整流程 用户发起请求 接口层判断库存 + 用户是否已下单 判断通过： Redis预扣库存（Lua脚本） 生成订单ID 放入消息队列 返回\u0026quot;排队成功\u0026quot;，前端无需等待数据库操作 5️⃣ 异步的性能优势 异步模式比同步模式性能更好，原因在于解耦请求处理和数据库操作，避免阻塞：\n请求处理快：线程只做轻量判断 + Redis + 消息入队 → 立即释放 流量削峰填谷：队列缓冲高峰请求，数据库平滑消费 避免超卖：Redis原子扣减 + 队列顺序消费 系统吞吐量高：Web层快速响应 + 后端多线程或分布式处理 类比说明 同步：前端直接等菜做好 → 高峰期排长队，厨房忙不过来 异步：前端先拿到取餐号 → 厨房按顺序做菜 → 系统稳定，用户体验好 6️⃣ 核心技术实现要点 技术环节 实现关键 接入层 限流（Nginx/网关）防止请求暴涨 库存判断 Redis原子操作 DECR + Lua脚本 请求排队 消息队列异步处理（RabbitMQ/Kafka/Redis Stream） 订单处理 消费端事务写数据库 去重 用户下单前检查是否已下单 削峰填谷 消息队列保证平滑消费 幂等性 消费端保证重复消费不会产生重复订单 7️⃣ 完整代码实现 7.1 项目结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 seckill-system/ ├── src/main/java/com/seckill/ │ ├── controller/ │ │ └── SeckillController.java │ ├── service/ │ │ ├── SeckillService.java │ │ ├── OrderService.java │ │ └── ProductService.java │ ├── config/ │ │ ├── RedisConfig.java │ │ └── RabbitMQConfig.java │ ├── entity/ │ │ ├── SeckillOrder.java │ │ └── SeckillProduct.java │ ├── dto/ │ │ └── SeckillMessage.java │ ├── consumer/ │ │ └── SeckillConsumer.java │ └── util/ │ └── RedisLuaScript.java 7.2 实体类定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // 秒杀商品实体 @Data @Entity @Table(name = \u0026#34;seckill_product\u0026#34;) public class SeckillProduct { @Id private Long id; private String name; private BigDecimal price; private Integer stock; private LocalDateTime startTime; private LocalDateTime endTime; private Integer status; // 0-未开始 1-进行中 2-已结束 } // 秒杀订单实体 @Data @Entity @Table(name = \u0026#34;seckill_order\u0026#34;) public class SeckillOrder { @Id private String id; private Long userId; private Long productId; private BigDecimal price; private Integer status; // 0-待支付 1-已支付 2-已取消 private LocalDateTime createTime; private LocalDateTime payTime; } 7.3 Redis配置和Lua脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 @Configuration public class RedisConfig { @Bean public RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate(RedisConnectionFactory factory) { RedisTemplate\u0026lt;String, Object\u0026gt; template = new RedisTemplate\u0026lt;\u0026gt;(); template.setConnectionFactory(factory); // 设置序列化 Jackson2JsonRedisSerializer\u0026lt;Object\u0026gt; serializer = new Jackson2JsonRedisSerializer\u0026lt;\u0026gt;(Object.class); ObjectMapper mapper = new ObjectMapper(); mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL); serializer.setObjectMapper(mapper); template.setValueSerializer(serializer); template.setKeySerializer(new StringRedisSerializer()); template.setHashKeySerializer(new StringRedisSerializer()); template.setHashValueSerializer(serializer); template.afterPropertiesSet(); return template; } } // Lua脚本工具类 @Component public class RedisLuaScript { @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; // 库存预扣Lua脚本 private static final String STOCK_DECR_SCRIPT = \u0026#34;local stock = redis.call(\u0026#39;get\u0026#39;, KEYS[1]) \u0026#34; + \u0026#34;if stock == false or tonumber(stock) \u0026lt;= 0 then \u0026#34; + \u0026#34; return -1 \u0026#34; + \u0026#34;end \u0026#34; + \u0026#34;local newStock = redis.call(\u0026#39;decr\u0026#39;, KEYS[1]) \u0026#34; + \u0026#34;if newStock \u0026lt; 0 then \u0026#34; + \u0026#34; redis.call(\u0026#39;incr\u0026#39;, KEYS[1]) \u0026#34; + \u0026#34; return -1 \u0026#34; + \u0026#34;end \u0026#34; + \u0026#34;return newStock\u0026#34;; // 检查用户是否已下单 private static final String CHECK_USER_ORDER_SCRIPT = \u0026#34;local exists = redis.call(\u0026#39;exists\u0026#39;, KEYS[1]) \u0026#34; + \u0026#34;if exists == 1 then \u0026#34; + \u0026#34; return 1 \u0026#34; + \u0026#34;end \u0026#34; + \u0026#34;redis.call(\u0026#39;setex\u0026#39;, KEYS[1], ARGV[1], \u0026#39;1\u0026#39;) \u0026#34; + \u0026#34;return 0\u0026#34;; /** * 原子性扣减库存 */ public Long decrStock(String stockKey) { DefaultRedisScript\u0026lt;Long\u0026gt; script = new DefaultRedisScript\u0026lt;\u0026gt;(); script.setScriptText(STOCK_DECR_SCRIPT); script.setResultType(Long.class); return redisTemplate.execute(script, Collections.singletonList(stockKey)); } /** * 检查并标记用户已下单 */ public Boolean checkAndSetUserOrder(String userOrderKey, int expireSeconds) { DefaultRedisScript\u0026lt;Long\u0026gt; script = new DefaultRedisScript\u0026lt;\u0026gt;(); script.setScriptText(CHECK_USER_ORDER_SCRIPT); script.setResultType(Long.class); Long result = redisTemplate.execute(script, Collections.singletonList(userOrderKey), String.valueOf(expireSeconds)); return result != null \u0026amp;\u0026amp; result == 0; // 0表示成功设置，1表示已存在 } } 7.4 消息队列配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @Configuration public class RabbitMQConfig { // 秒杀消息队列 public static final String SECKILL_QUEUE = \u0026#34;seckill.queue\u0026#34;; public static final String SECKILL_EXCHANGE = \u0026#34;seckill.exchange\u0026#34;; public static final String SECKILL_ROUTING_KEY = \u0026#34;seckill.message\u0026#34;; @Bean public Queue seckillQueue() { return QueueBuilder.durable(SECKILL_QUEUE).build(); } @Bean public DirectExchange seckillExchange() { return new DirectExchange(SECKILL_EXCHANGE); } @Bean public Binding seckillBinding() { return BindingBuilder .bind(seckillQueue()) .to(seckillExchange()) .with(SECKILL_ROUTING_KEY); } @Bean public MessageConverter messageConverter() { return new Jackson2JsonMessageConverter(); } } // 秒杀消息DTO @Data @AllArgsConstructor @NoArgsConstructor public class SeckillMessage { private Long userId; private Long productId; private String orderId; private LocalDateTime createTime; } 7.5 秒杀控制器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 @RestController @RequestMapping(\u0026#34;/seckill\u0026#34;) @Slf4j public class SeckillController { @Autowired private SeckillService seckillService; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; /** * 秒杀接口 */ @PostMapping(\u0026#34;/{productId}\u0026#34;) public Result\u0026lt;String\u0026gt; seckill(@PathVariable Long productId, @RequestParam Long userId) { try { // 1. 参数校验 if (productId == null || userId == null) { return Result.fail(\u0026#34;参数不能为空\u0026#34;); } // 2. 检查秒杀活动状态 if (!seckillService.isSeckillActive(productId)) { return Result.fail(\u0026#34;秒杀活动未开始或已结束\u0026#34;); } // 3. 执行秒杀 String orderId = seckillService.executeSeckill(productId, userId); if (orderId != null) { return Result.success(\u0026#34;排队成功，订单号：\u0026#34; + orderId); } else { return Result.fail(\u0026#34;秒杀失败，请重试\u0026#34;); } } catch (Exception e) { log.error(\u0026#34;秒杀异常，商品ID：{}，用户ID：{}\u0026#34;, productId, userId, e); return Result.fail(\u0026#34;系统异常，请稍后重试\u0026#34;); } } /** * 查询秒杀结果 */ @GetMapping(\u0026#34;/result/{orderId}\u0026#34;) public Result\u0026lt;SeckillOrder\u0026gt; getSeckillResult(@PathVariable String orderId) { try { SeckillOrder order = seckillService.getSeckillOrder(orderId); if (order != null) { return Result.success(order); } else { return Result.fail(\u0026#34;订单不存在或处理中\u0026#34;); } } catch (Exception e) { log.error(\u0026#34;查询秒杀结果异常，订单ID：{}\u0026#34;, orderId, e); return Result.fail(\u0026#34;查询失败\u0026#34;); } } /** * 获取商品库存 */ @GetMapping(\u0026#34;/stock/{productId}\u0026#34;) public Result\u0026lt;Integer\u0026gt; getStock(@PathVariable Long productId) { try { String stockKey = \u0026#34;stock:\u0026#34; + productId; Object stock = redisTemplate.opsForValue().get(stockKey); if (stock != null) { return Result.success(Integer.valueOf(stock.toString())); } else { return Result.success(0); } } catch (Exception e) { log.error(\u0026#34;获取库存异常，商品ID：{}\u0026#34;, productId, e); return Result.fail(\u0026#34;获取库存失败\u0026#34;); } } } 7.6 秒杀服务实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 @Service @Slf4j public class SeckillService { @Autowired private ProductService productService; @Autowired private OrderService orderService; @Autowired private RedisLuaScript redisLuaScript; @Autowired private RabbitTemplate rabbitTemplate; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; private static final String STOCK_PREFIX = \u0026#34;stock:\u0026#34;; private static final String USER_ORDER_PREFIX = \u0026#34;user_order:\u0026#34;; private static final int USER_ORDER_EXPIRE = 3600; // 1小时 /** * 检查秒杀活动是否进行中 */ public boolean isSeckillActive(Long productId) { try { SeckillProduct product = productService.getById(productId); if (product == null) { return false; } LocalDateTime now = LocalDateTime.now(); return product.getStatus() == 1 \u0026amp;\u0026amp; now.isAfter(product.getStartTime()) \u0026amp;\u0026amp; now.isBefore(product.getEndTime()); } catch (Exception e) { log.error(\u0026#34;检查秒杀活动状态异常，商品ID：{}\u0026#34;, productId, e); return false; } } /** * 执行秒杀 */ public String executeSeckill(Long productId, Long userId) { try { // 1. 检查用户是否已下单 String userOrderKey = USER_ORDER_PREFIX + userId + \u0026#34;:\u0026#34; + productId; if (!redisLuaScript.checkAndSetUserOrder(userOrderKey, USER_ORDER_EXPIRE)) { log.warn(\u0026#34;用户已下单，用户ID：{}，商品ID：{}\u0026#34;, userId, productId); return null; } // 2. 原子性扣减库存 String stockKey = STOCK_PREFIX + productId; Long remainingStock = redisLuaScript.decrStock(stockKey); if (remainingStock == null || remainingStock \u0026lt; 0) { log.warn(\u0026#34;库存不足，商品ID：{}，用户ID：{}\u0026#34;, productId, userId); return null; } // 3. 生成订单ID String orderId = generateOrderId(); // 4. 发送消息到队列 SeckillMessage message = new SeckillMessage(); message.setUserId(userId); message.setProductId(productId); message.setOrderId(orderId); message.setCreateTime(LocalDateTime.now()); rabbitTemplate.convertAndSend( RabbitMQConfig.SECKILL_EXCHANGE, RabbitMQConfig.SECKILL_ROUTING_KEY, message ); log.info(\u0026#34;秒杀请求已入队，订单ID：{}，用户ID：{}，商品ID：{}\u0026#34;, orderId, userId, productId); return orderId; } catch (Exception e) { log.error(\u0026#34;执行秒杀异常，商品ID：{}，用户ID：{}\u0026#34;, productId, userId, e); return null; } } /** * 获取秒杀订单 */ public SeckillOrder getSeckillOrder(String orderId) { try { return orderService.getByOrderId(orderId); } catch (Exception e) { log.error(\u0026#34;获取秒杀订单异常，订单ID：{}\u0026#34;, orderId, e); return null; } } /** * 预热商品库存到Redis */ public void warmUpStock(Long productId) { try { SeckillProduct product = productService.getById(productId); if (product != null \u0026amp;\u0026amp; product.getStock() \u0026gt; 0) { String stockKey = STOCK_PREFIX + productId; redisTemplate.opsForValue().set(stockKey, product.getStock()); log.info(\u0026#34;商品库存预热成功，商品ID：{}，库存：{}\u0026#34;, productId, product.getStock()); } } catch (Exception e) { log.error(\u0026#34;预热商品库存异常，商品ID：{}\u0026#34;, productId, e); } } /** * 生成订单ID */ private String generateOrderId() { return \u0026#34;SK\u0026#34; + System.currentTimeMillis() + ThreadLocalRandom.current().nextInt(1000, 9999); } } 7.7 消息消费者 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 @Component @Slf4j public class SeckillConsumer { @Autowired private OrderService orderService; @Autowired private ProductService productService; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; /** * 消费秒杀消息 */ @RabbitListener(queues = RabbitMQConfig.SECKILL_QUEUE) public void handleSeckillMessage(SeckillMessage message) { log.info(\u0026#34;开始处理秒杀消息，订单ID：{}，用户ID：{}，商品ID：{}\u0026#34;, message.getOrderId(), message.getUserId(), message.getProductId()); try { // 1. 再次检查库存（双重保险） SeckillProduct product = productService.getById(message.getProductId()); if (product == null || product.getStock() \u0026lt;= 0) { log.warn(\u0026#34;商品不存在或库存不足，订单ID：{}\u0026#34;, message.getOrderId()); return; } // 2. 创建订单 SeckillOrder order = new SeckillOrder(); order.setId(message.getOrderId()); order.setUserId(message.getUserId()); order.setProductId(message.getProductId()); order.setPrice(product.getPrice()); order.setStatus(0); // 待支付 order.setCreateTime(LocalDateTime.now()); // 3. 扣减数据库库存 boolean stockUpdated = productService.decrStock(message.getProductId()); if (!stockUpdated) { log.warn(\u0026#34;扣减数据库库存失败，订单ID：{}\u0026#34;, message.getOrderId()); return; } // 4. 保存订单 orderService.save(order); log.info(\u0026#34;秒杀订单创建成功，订单ID：{}，用户ID：{}，商品ID：{}\u0026#34;, message.getOrderId(), message.getUserId(), message.getProductId()); } catch (Exception e) { log.error(\u0026#34;处理秒杀消息异常，订单ID：{}\u0026#34;, message.getOrderId(), e); } } } 7.8 商品服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 @Service @Transactional public class ProductService { @Autowired private SeckillProductMapper productMapper; /** * 扣减数据库库存 */ public boolean decrStock(Long productId) { try { int result = productMapper.decrStock(productId); return result \u0026gt; 0; } catch (Exception e) { log.error(\u0026#34;扣减数据库库存异常，商品ID：{}\u0026#34;, productId, e); return false; } } /** * 获取商品信息 */ public SeckillProduct getById(Long productId) { try { return productMapper.selectById(productId); } catch (Exception e) { log.error(\u0026#34;获取商品信息异常，商品ID：{}\u0026#34;, productId, e); return null; } } } 7.9 订单服务 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @Service public class OrderService { @Autowired private SeckillOrderMapper orderMapper; /** * 保存订单 */ public void save(SeckillOrder order) { try { orderMapper.insert(order); } catch (Exception e) { log.error(\u0026#34;保存订单异常，订单ID：{}\u0026#34;, order.getId(), e); throw new RuntimeException(\u0026#34;保存订单失败\u0026#34;, e); } } /** * 根据订单ID查询订单 */ public SeckillOrder getByOrderId(String orderId) { try { return orderMapper.selectByOrderId(orderId); } catch (Exception e) { log.error(\u0026#34;查询订单异常，订单ID：{}\u0026#34;, orderId, e); return null; } } } 7.10 数据库Mapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 商品Mapper @Mapper public interface SeckillProductMapper extends BaseMapper\u0026lt;SeckillProduct\u0026gt; { /** * 扣减库存 */ @Update(\u0026#34;UPDATE seckill_product SET stock = stock - 1 WHERE id = #{productId} AND stock \u0026gt; 0\u0026#34;) int decrStock(@Param(\u0026#34;productId\u0026#34;) Long productId); } // 订单Mapper @Mapper public interface SeckillOrderMapper extends BaseMapper\u0026lt;SeckillOrder\u0026gt; { /** * 根据订单ID查询 */ @Select(\u0026#34;SELECT * FROM seckill_order WHERE id = #{orderId}\u0026#34;) SeckillOrder selectByOrderId(@Param(\u0026#34;orderId\u0026#34;) String orderId); } 8️⃣ 异步秒杀优化技巧 8.1 本地缓存库存 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 @Component public class LocalStockCache { private final Map\u0026lt;Long, AtomicInteger\u0026gt; localStockMap = new ConcurrentHashMap\u0026lt;\u0026gt;(); @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; /** * 获取本地库存 */ public int getLocalStock(Long productId) { AtomicInteger stock = localStockMap.get(productId); return stock != null ? stock.get() : 0; } /** * 扣减本地库存 */ public boolean decrLocalStock(Long productId) { AtomicInteger stock = localStockMap.computeIfAbsent(productId, k -\u0026gt; new AtomicInteger(0)); return stock.decrementAndGet() \u0026gt;= 0; } /** * 同步Redis库存到本地 */ @Scheduled(fixedRate = 1000) // 每秒同步一次 public void syncStockFromRedis() { for (Long productId : localStockMap.keySet()) { String stockKey = \u0026#34;stock:\u0026#34; + productId; Object redisStock = redisTemplate.opsForValue().get(stockKey); if (redisStock != null) { int stock = Integer.parseInt(redisStock.toString()); localStockMap.put(productId, new AtomicInteger(stock)); } } } } 8.2 限流配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 @Configuration public class RateLimitConfig { @Bean public RedisRateLimiter redisRateLimiter() { return new RedisRateLimiter(100, 200); // 每秒100个请求，突发200个 } } // 限流注解 @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface RateLimit { String key() default \u0026#34;rate_limit\u0026#34;; int time() default 60; int count() default 100; } // 限流切面 @Aspect @Component public class RateLimitAspect { @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; @Around(\u0026#34;@annotation(rateLimit)\u0026#34;) public Object around(ProceedingJoinPoint point, RateLimit rateLimit) throws Throwable { String key = rateLimit.key(); int time = rateLimit.time(); int count = rateLimit.count(); String rateLimitKey = \u0026#34;rate_limit:\u0026#34; + key + \u0026#34;:\u0026#34; + System.currentTimeMillis() / 1000; Long current = redisTemplate.opsForValue().increment(rateLimitKey); if (current == 1) { redisTemplate.expire(rateLimitKey, time, TimeUnit.SECONDS); } if (current \u0026gt; count) { throw new RuntimeException(\u0026#34;请求过于频繁，请稍后重试\u0026#34;); } return point.proceed(); } } 8.3 热点商品预热 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 @Component public class HotProductPreheater { @Autowired private SeckillService seckillService; @Autowired private ProductService productService; /** * 预热热点商品 */ @Scheduled(cron = \u0026#34;0 0 0 * * ?\u0026#34;) // 每天凌晨执行 public void preheatHotProducts() { List\u0026lt;SeckillProduct\u0026gt; hotProducts = productService.getHotProducts(); for (SeckillProduct product : hotProducts) { seckillService.warmUpStock(product.getId()); } log.info(\u0026#34;热点商品预热完成，预热商品数量：{}\u0026#34;, hotProducts.size()); } } 9️⃣ 监控和告警 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @Component public class SeckillMonitor { @Autowired private MeterRegistry meterRegistry; private final Counter successCounter = Counter.builder(\u0026#34;seckill.success\u0026#34;).register(meterRegistry); private final Counter failCounter = Counter.builder(\u0026#34;seckill.fail\u0026#34;).register(meterRegistry); private final Timer processTimer = Timer.builder(\u0026#34;seckill.process.time\u0026#34;).register(meterRegistry); /** * 记录秒杀成功 */ public void recordSuccess() { successCounter.increment(); } /** * 记录秒杀失败 */ public void recordFail() { failCounter.increment(); } /** * 记录处理时间 */ public void recordProcessTime(Duration duration) { processTimer.record(duration); } } 🔟 前端实现示例 10.1 Vue.js 前端实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;seckill-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;product-info\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;{{ product.name }}\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;价格：¥{{ product.price }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;库存：{{ stock }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;seckill-button\u0026#34;\u0026gt; \u0026lt;button v-if=\u0026#34;!isSeckilling \u0026amp;\u0026amp; stock \u0026gt; 0\u0026#34; @click=\u0026#34;startSeckill\u0026#34; :disabled=\u0026#34;isSeckilling\u0026#34; \u0026gt; 立即秒杀 \u0026lt;/button\u0026gt; \u0026lt;button v-else-if=\u0026#34;isSeckilling\u0026#34; disabled\u0026gt; 排队中... \u0026lt;/button\u0026gt; \u0026lt;button v-else disabled\u0026gt; 已售罄 \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div v-if=\u0026#34;orderResult\u0026#34; class=\u0026#34;result\u0026#34;\u0026gt; \u0026lt;p v-if=\u0026#34;orderResult.success\u0026#34;\u0026gt;秒杀成功！订单号：{{ orderResult.orderId }}\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;{{ orderResult.message }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { product: {}, stock: 0, isSeckilling: false, orderResult: null, pollTimer: null } }, mounted() { this.loadProductInfo(); this.startStockPolling(); }, beforeDestroy() { if (this.pollTimer) { clearInterval(this.pollTimer); } }, methods: { async loadProductInfo() { try { const response = await this.$http.get(`/api/product/${this.$route.params.productId}`); this.product = response.data; } catch (error) { console.error(\u0026#39;加载商品信息失败\u0026#39;, error); } }, async getStock() { try { const response = await this.$http.get(`/api/seckill/stock/${this.$route.params.productId}`); this.stock = response.data; } catch (error) { console.error(\u0026#39;获取库存失败\u0026#39;, error); } }, startStockPolling() { this.getStock(); this.pollTimer = setInterval(() =\u0026gt; { this.getStock(); }, 1000); }, async startSeckill() { this.isSeckilling = true; this.orderResult = null; try { const response = await this.$http.post(`/api/seckill/${this.$route.params.productId}`, { userId: this.getCurrentUserId() }); if (response.data.success) { this.orderResult = { success: true, orderId: response.data.data }; this.pollOrderResult(response.data.data); } else { this.orderResult = { success: false, message: response.data.message }; } } catch (error) { this.orderResult = { success: false, message: \u0026#39;网络异常，请重试\u0026#39; }; } finally { this.isSeckilling = false; } }, async pollOrderResult(orderId) { const maxAttempts = 30; // 最多轮询30次 let attempts = 0; const poll = async () =\u0026gt; { try { const response = await this.$http.get(`/api/seckill/result/${orderId}`); if (response.data.success) { this.orderResult = { success: true, orderId: orderId, order: response.data.data }; return; } attempts++; if (attempts \u0026lt; maxAttempts) { setTimeout(poll, 1000); // 1秒后重试 } else { this.orderResult = { success: false, message: \u0026#39;订单处理超时，请稍后查询\u0026#39; }; } } catch (error) { console.error(\u0026#39;查询订单结果失败\u0026#39;, error); attempts++; if (attempts \u0026lt; maxAttempts) { setTimeout(poll, 1000); } } }; poll(); }, getCurrentUserId() { // 获取当前用户ID的逻辑 return localStorage.getItem(\u0026#39;userId\u0026#39;) || \u0026#39;1\u0026#39;; } } } \u0026lt;/script\u0026gt; 1️⃣1️⃣ 总结与直观比喻 核心流程总结： 前端：拿到\u0026quot;抢购凭证\u0026quot;，无需直接等待数据库完成订单 接口层：快速判断库存和用户资格，入队 → 高并发下线程不被阻塞 后台：消费队列 → 扣数据库库存 → 创建订单 → 通知用户 Redis + 消息队列：保证库存原子性、顺序处理、系统平稳运行 ⚡ 异步秒杀的核心理念： 快速接收请求 + 排队 + 异步处理，实现削峰填谷、防止超卖、提升系统吞吐量。\n💡 直观类比： 前端用户：拿到取餐号 后台系统：厨房按顺序做菜 用户最终能拿到菜，但系统不会被瞬时流量压垮 技术优势： 高并发处理：Redis + 消息队列实现削峰填谷 防止超卖：Lua脚本保证原子性操作 系统稳定：异步处理避免数据库压力 用户体验：快速响应，无需长时间等待 可扩展性：支持分布式部署和水平扩展 通过本文的详细分析和完整代码实现，相信你已经对异步秒杀系统有了深入的理解。在实际项目中，可以根据具体业务需求对代码进行相应的调整和优化。\n本文档详细介绍了异步秒杀系统的设计与实现，包含了完整的代码示例和优化技巧，帮助开发者构建高性能、高可用的秒杀系统。\n","date":"2025-09-10T00:00:00Z","permalink":"https://Yin123-ybh.github.io/p/%E5%BC%82%E6%AD%A5%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E5%90%ABredis%E9%A2%84%E6%89%A3%E5%BA%93%E5%AD%98%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/","title":"异步秒杀系统深度解析（含Redis预扣库存与消息队列实现）"},{"content":"基于 Session 的短信登录完整解析 在现代 Web 应用中，短信验证码登录 是一种非常常见的无密码认证方式。它的好处是简单、安全，用户只需要输入手机号和验证码即可登录，而不用记复杂的密码。\n很多初学者在实现时会有疑惑：验证码存哪？怎么比对？登录状态如何保持？ 这篇文章将通过推导的方式，逐步解释清楚，并给出完整的代码示例。\n一、为什么需要 Session 要理解短信登录，必须先搞清楚 Session 的概念。\nHTTP 协议的一个最大特点是：无状态。\n这意味着每一次请求，服务器都不会记得你是谁。\n但是在实际应用里，我们需要：\n登录之后，保持登录状态 购物车内容能够一直保存 验证码发送后，能够正确地校验 这时候就需要 Session。\n1.1 Session 的类比 你可以把 Session 想象成服务器给用户开的一间小储物柜：\n当用户第一次访问时，服务器（tomcat）分配一个储物柜（Session），并生成一个唯一编号（Session ID） 服务器把这个编号写在一张小纸条上（Cookie），交给浏览器（客户端）保存 以后浏览器每次访问时，都会带上这张小纸条 服务器根据纸条上的编号，就能找到对应的储物柜，从里面取出属于该用户的数据 1.2 Session vs Cookie 特性 Cookie（小纸条） Session（储物柜） 存储位置 浏览器端 服务器端 安全性 较低（容易被篡改） 较高（由服务器维护） 容量 4KB 左右 取决于服务器内存 生命周期 可设置长时间保存 默认随浏览器关闭或超时清除 二、短信登录的推导过程 现在我们把 Session 的原理放到 短信验证码登录 的场景中，来一步步推导。\n2.1 用户提交手机号 用户在前端页面输入手机号 前端把手机号发送给后端 2.2 服务器生成验证码 后端生成一个 6 位随机数（例如 123456） 把这个验证码保存到 Session 储物柜 里 同时调用短信服务商的 API，把验证码发送到用户手机 此时，Session 中保存的是： key = \u0026ldquo;SMS_CODE_手机号\u0026rdquo; value = \u0026ldquo;123456\u0026rdquo;\n2.3 用户输入验证码登录 用户收到验证码，在页面输入 浏览器在发起请求时，会自动带上 Session ID 的小纸条（Cookie） 后端根据 Session ID 找到储物柜，从中取出验证码 比对用户输入的验证码与 Session 中保存的验证码 一致 ✅ → 登录成功 不一致 ❌ → 登录失败 三、代码实现示例（Spring Boot） 接下来用 Java + Spring Boot 来实现一个最简化的 基于 Session 的短信登录。\n3.1 发送验证码接口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @RestController @RequestMapping(\u0026#34;/auth\u0026#34;) public class SmsLoginController { @PostMapping(\u0026#34;/sendCode\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; sendCode(@RequestParam String phone, HttpSession session) { // 生成 6 位验证码 String code = String.valueOf((int)((Math.random() * 9 + 1) * 100000)); // 模拟发送短信（真实情况需接入短信服务商 API） System.out.println(\u0026#34;向手机号 \u0026#34; + phone + \u0026#34; 发送验证码：\u0026#34; + code); // 保存到 session session.setAttribute(\u0026#34;SMS_CODE_\u0026#34; + phone, code); session.setAttribute(\u0026#34;SMS_CODE_TIME_\u0026#34; + phone, System.currentTimeMillis()); return ResponseEntity.ok(\u0026#34;验证码已发送\u0026#34;); } } 说明： 验证码保存在 Session 中，不存前端 建议同时保存验证码生成时间，方便后续判断是否过期\n3.2 验证登录接口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 @PostMapping(\u0026#34;/login\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; login(@RequestParam String phone, @RequestParam String code, HttpSession session) { String sessionCode = (String) session.getAttribute(\u0026#34;SMS_CODE_\u0026#34; + phone); Long codeTime = (Long) session.getAttribute(\u0026#34;SMS_CODE_TIME_\u0026#34; + phone); if (sessionCode == null) { return ResponseEntity.status(400).body(\u0026#34;验证码未发送或已过期\u0026#34;); } // 验证是否过期（5分钟有效） if (System.currentTimeMillis() - codeTime \u0026gt; 5 * 60 * 1000) { session.removeAttribute(\u0026#34;SMS_CODE_\u0026#34; + phone); session.removeAttribute(\u0026#34;SMS_CODE_TIME_\u0026#34; + phone); return ResponseEntity.status(400).body(\u0026#34;验证码已过期\u0026#34;); } if (!sessionCode.equals(code)) { return ResponseEntity.status(400).body(\u0026#34;验证码错误\u0026#34;); } // 登录成功，写入用户登录状态 session.setAttribute(\u0026#34;LOGIN_USER\u0026#34;, phone); // 清理验证码 session.removeAttribute(\u0026#34;SMS_CODE_\u0026#34; + phone); session.removeAttribute(\u0026#34;SMS_CODE_TIME_\u0026#34; + phone); return ResponseEntity.ok(\u0026#34;登录成功\u0026#34;); } 说明： 核心逻辑在 后端比对，前端只负责收集输入 验证码过期机制必须有，防止重复使用\n3.3 获取当前登录用户接口 1 2 3 4 5 6 7 8 @GetMapping(\u0026#34;/me\u0026#34;) public ResponseEntity\u0026lt;String\u0026gt; getUser(HttpSession session) { String phone = (String) session.getAttribute(\u0026#34;LOGIN_USER\u0026#34;); if (phone == null) { return ResponseEntity.status(401).body(\u0026#34;未登录\u0026#34;); } return ResponseEntity.ok(\u0026#34;当前登录用户：\u0026#34; + phone); } 四、关键点总结 1.Session 是储物柜，Cookie 是储物柜的取件凭证证 验证码存放在 Session（服务器端），不存浏览器 浏览器只保留 Session ID（Cookie） 2.比对逻辑必须在后端完成 前端只负责收集和提交手机号、验证码 服务器根据 Session 找到验证码并比对，决定是否登录 3.安全性措施 验证码要有过期时间（一般 5 分钟） 验证码要有发送频率限制，防止被恶意刷 五、流程回顾 让我们回顾整个短信登录的过程： 1.用户输入手机号 2.服务器生成验证码，存到 Session，并通过短信发送 3.用户收到验证码，输入到前端页面 4.浏览器请求时带上 Cookie（Session ID） 5.服务器用 Session ID 找到储物柜，取出验证码进行比对 一致 → 登录成功； 不一致/过期 → 登录失败 6.扩展思考 在实际生产环境中，Session 可能存放在 Redis 里，以便支持分布式部署。\n另外，也可以替代 Session，用 JWT（JSON Web Token） 实现无状态的登录。 但核心思想是一致的：\n验证码必须在后端保存和比对 前端只负责展示和输入 7.结语 通过上面的推导，我们把“短信登录”这个常见需求，完整地拆解成了 业务流程 + Session 原理 + 实现代码。\n如果你刚开始学习后端开发，希望你能从这篇文章中真正理解：\n为什么要用 Session 短信验证码应该存放在哪里 验证逻辑为什么要在后端 这样，不管是做一个小 demo，还是将来应对生产级的项目，你都能举一反三。\n","date":"2025-08-26T00:00:00Z","permalink":"https://Yin123-ybh.github.io/p/%E5%9F%BA%E4%BA%8E-session-%E7%9A%84%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AE%8C%E6%95%B4%E8%A7%A3%E6%9E%90/","title":"基于 Session 的短信登录完整解析"},{"content":"数据库与 Redis 双写一致性问题全解析 在高并发系统中，Redis 作为缓存层，MySQL 作为存储层的组合几乎是标配。Redis 的高性能极大缓解了数据库的压力，但这也带来了一个核心难题：如何保证数据库与缓存的数据一致性？\n本文将全面分析数据库与 Redis 双写一致性问题，包括 不一致产生的原因、常见解决方案、优缺点分析、代码示例，以及通俗的生活类比。读完本文，你将对缓存一致性问题有系统、深刻的理解。\n一、为什么数据库和缓存可能不一致？ 很多人一开始会疑惑：数据库和缓存都是我们自己在控制，为什么会不一致？\n其实，问题的根源在于 缓存和数据库是两个独立系统，数据同步不是原子操作，中间存在时间差和失败的可能。\n1.1 常见不一致原因 ① 写数据库成功，但缓存没更新 原因：业务代码里先写数据库，再更新缓存。如果更新缓存失败（比如 Redis 宕机或网络抖动），就会出现 数据库新值、缓存旧值 的情况。\n通俗类比：你换了手机号码，但忘了告诉朋友。结果朋友打电话时，还是打到你旧号码。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 @Service public class UserService { @Autowired private UserMapper userMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; public void updateUser(User user) { try { // 1. 更新数据库 userMapper.updateById(user); // 2. 更新缓存 - 这里可能失败！ redisTemplate.opsForValue().set(\u0026#34;user:\u0026#34; + user.getId(), user); } catch (Exception e) { // 如果缓存更新失败，数据库已经更新了，但缓存还是旧值 log.error(\u0026#34;更新缓存失败\u0026#34;, e); } } } ② 更新顺序导致的问题 写数据库 → 删除缓存：如果写数据库成功，但删除缓存失败，那么缓存里依旧是旧数据，下一次查询会直接拿旧缓存。\n删除缓存 → 写数据库：如果在删除缓存后、写数据库前，恰好有请求查询数据，就会发生 缓存回填旧值 的问题。\n通俗类比：\n你要换家里的锁。 方案一（先换锁，再扔旧钥匙）：安全，但万一扔钥匙时手滑没扔掉（缓存没删掉），别人还能用旧钥匙开门。 方案二（先扔钥匙，再换锁）：在你换锁的几分钟里，别人可能正好用旧钥匙开门（缓存被旧值回填）。 代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 方案一：先写数据库，再删缓存 public void updateUserV1(User user) { // 1. 更新数据库 userMapper.updateById(user); // 2. 删除缓存 - 可能失败 try { redisTemplate.delete(\u0026#34;user:\u0026#34; + user.getId()); } catch (Exception e) { // 删除失败，缓存还是旧值 log.error(\u0026#34;删除缓存失败\u0026#34;, e); } } // 方案二：先删缓存，再写数据库 public void updateUserV2(User user) { // 1. 删除缓存 redisTemplate.delete(\u0026#34;user:\u0026#34; + user.getId()); // 2. 更新数据库 - 在删除缓存和更新数据库之间，可能有查询请求回填旧值 userMapper.updateById(user); } ③ 并发覆盖问题 在高并发下，多个请求同时修改同一条数据，可能出现覆盖。\n场景举例：\n请求 A：更新用户余额为 100 → 更新数据库成功 → 删除缓存 请求 B：更新用户余额为 200 → 更新数据库成功 → 删除缓存 请求 A 线程较慢，在 B 更新完成后又回填了 100 到缓存 结果：数据库是 200，缓存却是 100，产生了脏数据。 通俗类比：两个人同时往一个文档里写数据。甲写了新版内容，乙写完旧版后保存，最终的文档被乙覆盖，甲的修改消失。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 @Service public class AccountService { @Autowired private AccountMapper accountMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; // 并发更新余额的问题示例 public void updateBalance(Long userId, BigDecimal amount) { // 1. 查询当前余额 Account account = accountMapper.selectById(userId); // 2. 计算新余额 BigDecimal newBalance = account.getBalance().add(amount); account.setBalance(newBalance); // 3. 更新数据库 accountMapper.updateById(account); // 4. 删除缓存 redisTemplate.delete(\u0026#34;account:\u0026#34; + userId); // 问题：如果两个线程同时执行，可能出现覆盖 } // 查询余额 public BigDecimal getBalance(Long userId) { // 1. 先查缓存 String cacheKey = \u0026#34;account:\u0026#34; + userId; BigDecimal balance = (BigDecimal) redisTemplate.opsForValue().get(cacheKey); if (balance != null) { return balance; } // 2. 缓存未命中，查数据库 Account account = accountMapper.selectById(userId); balance = account.getBalance(); // 3. 回填缓存 redisTemplate.opsForValue().set(cacheKey, balance, 30, TimeUnit.MINUTES); return balance; } } ④ 缓存回填问题 当缓存过期或被删除时，如果多个请求同时查询，会出现 缓存击穿，所有请求都直接打到数据库。如果数据库的数据恰好正在被更新，就可能回填旧值到缓存。\n通俗类比：大家都在查快递单号。缓存里过期了，大家都去问快递公司。正好快递公司系统还没更新，有人把旧的物流信息拿回来，又重新存进缓存。\n代码示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 @Service public class ProductService { @Autowired private ProductMapper productMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; public Product getProduct(Long productId) { String cacheKey = \u0026#34;product:\u0026#34; + productId; // 1. 先查缓存 Product product = (Product) redisTemplate.opsForValue().get(cacheKey); if (product != null) { return product; } // 2. 缓存未命中，查数据库 product = productMapper.selectById(productId); // 3. 回填缓存 - 这里可能回填旧值 if (product != null) { redisTemplate.opsForValue().set(cacheKey, product, 30, TimeUnit.MINUTES); } return product; } public void updateProduct(Product product) { // 1. 更新数据库 productMapper.updateById(product); // 2. 删除缓存 redisTemplate.delete(\u0026#34;product:\u0026#34; + product.getId()); // 问题：在删除缓存后，如果有查询请求，可能回填旧值 } } ⑤ 异常或消息丢失 在使用消息队列、Binlog 同步的场景里，如果消息丢失或消费失败，也会造成数据库与缓存不一致。\n通俗类比：你让朋友帮忙转告一个信息。如果朋友忘了说（消息丢了），接收方就永远拿不到最新数据。\n小结 数据库与缓存的不一致，归根到底是因为 更新缓存和更新数据库不是一个原子操作，再加上 网络、并发、延迟、异常 等因素，导致不同步。\n接下来，我们看常见的解决方案。\n二、常见同步策略与实现 2.1 Cache Aside（旁路缓存模式） 这是最常见的缓存策略：\n读：先读缓存，缓存没有就读数据库，然后回填到缓存。 写：更新数据库，然后删除缓存。 流程图 1 2 3 4 读请求： 先查缓存 → 缓存命中 → 返回 缓存未命中 → 查数据库 → 写入缓存 → 返回 写请求： 先写数据库 → 删除缓存 优点 简单易实现 更新频率低、读多写少的场景下性能好 缺点 写后删除缓存不是原子操作，可能产生不一致 删除缓存和更新数据库之间有窗口期，容易被并发覆盖 通俗类比 你记不住朋友的手机号（数据库），于是写在纸条上放在口袋里（缓存）。每次查号码时，先摸口袋。如果号码变了，你改手机通讯录（数据库），然后把纸条扔掉（删缓存）。下次再有人问，就会从手机查出新号码，再抄一张新纸条。\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @Service public class UserService { @Autowired private UserMapper userMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; private static final String USER_CACHE_PREFIX = \u0026#34;user:\u0026#34;; private static final int CACHE_EXPIRE_TIME = 30; // 分钟 /** * 查询用户 - Cache Aside 读策略 */ public User getUser(Long userId) { String cacheKey = USER_CACHE_PREFIX + userId; // 1. 先查缓存 User user = (User) redisTemplate.opsForValue().get(cacheKey); if (user != null) { log.info(\u0026#34;缓存命中，用户ID: {}\u0026#34;, userId); return user; } // 2. 缓存未命中，查数据库 log.info(\u0026#34;缓存未命中，查询数据库，用户ID: {}\u0026#34;, userId); user = userMapper.selectById(userId); if (user != null) { // 3. 回填缓存 redisTemplate.opsForValue().set(cacheKey, user, CACHE_EXPIRE_TIME, TimeUnit.MINUTES); log.info(\u0026#34;数据回填缓存，用户ID: {}\u0026#34;, userId); } return user; } /** * 更新用户 - Cache Aside 写策略 */ @Transactional public boolean updateUser(User user) { try { // 1. 更新数据库 int result = userMapper.updateById(user); if (result \u0026lt;= 0) { log.warn(\u0026#34;更新用户失败，用户ID: {}\u0026#34;, user.getId()); return false; } // 2. 删除缓存 String cacheKey = USER_CACHE_PREFIX + user.getId(); redisTemplate.delete(cacheKey); log.info(\u0026#34;删除缓存成功，用户ID: {}\u0026#34;, user.getId()); return true; } catch (Exception e) { log.error(\u0026#34;更新用户异常，用户ID: {}\u0026#34;, user.getId(), e); throw new RuntimeException(\u0026#34;更新用户失败\u0026#34;, e); } } /** * 删除用户 */ @Transactional public boolean deleteUser(Long userId) { try { // 1. 删除数据库记录 int result = userMapper.deleteById(userId); if (result \u0026lt;= 0) { log.warn(\u0026#34;删除用户失败，用户ID: {}\u0026#34;, userId); return false; } // 2. 删除缓存 String cacheKey = USER_CACHE_PREFIX + userId; redisTemplate.delete(cacheKey); log.info(\u0026#34;删除缓存成功，用户ID: {}\u0026#34;, userId); return true; } catch (Exception e) { log.error(\u0026#34;删除用户异常，用户ID: {}\u0026#34;, userId, e); throw new RuntimeException(\u0026#34;删除用户失败\u0026#34;, e); } } } 2.2 延时双删策略 在 写数据库 + 删除缓存 的基础上，增加一次延时删除。\n1 2 3 4 updateDB(); delCache(); Thread.sleep(500); delCache(); 为什么要多删一次？ 因为第一次删缓存后，可能有并发请求查询，回填了旧值。第二次延迟删除，可以把旧值再清理掉。\n优点 思路简单，在一定程度上缓解并发覆盖问题 缺点 延迟时间不好确定，时间过长 → 脏数据存在太久；时间过短 → 覆盖问题仍可能发生 会带来额外的性能开销 通俗类比 你换了门锁。先把旧钥匙收走（删缓存）。但担心有人手里还有备份钥匙，于是过几分钟再来检查一次，把可能冒出来的旧钥匙也收走。\n代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 @Service public class UserServiceWithDelayDoubleDelete { @Autowired private UserMapper userMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; @Autowired private ThreadPoolTaskExecutor taskExecutor; private static final String USER_CACHE_PREFIX = \u0026#34;user:\u0026#34;; private static final int DELAY_TIME = 500; // 毫秒 /** * 延时双删策略更新用户 */ @Transactional public boolean updateUserWithDelayDoubleDelete(User user) { try { // 1. 更新数据库 int result = userMapper.updateById(user); if (result \u0026lt;= 0) { return false; } // 2. 第一次删除缓存 String cacheKey = USER_CACHE_PREFIX + user.getId(); redisTemplate.delete(cacheKey); log.info(\u0026#34;第一次删除缓存，用户ID: {}\u0026#34;, user.getId()); // 3. 异步延时删除缓存 taskExecutor.execute(() -\u0026gt; { try { Thread.sleep(DELAY_TIME); redisTemplate.delete(cacheKey); log.info(\u0026#34;延时删除缓存完成，用户ID: {}\u0026#34;, user.getId()); } catch (InterruptedException e) { Thread.currentThread().interrupt(); log.error(\u0026#34;延时删除缓存被中断，用户ID: {}\u0026#34;, user.getId(), e); } catch (Exception e) { log.error(\u0026#34;延时删除缓存异常，用户ID: {}\u0026#34;, user.getId(), e); } }); return true; } catch (Exception e) { log.error(\u0026#34;更新用户异常，用户ID: {}\u0026#34;, user.getId(), e); throw new RuntimeException(\u0026#34;更新用户失败\u0026#34;, e); } } /** * 查询用户 */ public User getUser(Long userId) { String cacheKey = USER_CACHE_PREFIX + userId; // 1. 先查缓存 User user = (User) redisTemplate.opsForValue().get(cacheKey); if (user != null) { return user; } // 2. 缓存未命中，查数据库 user = userMapper.selectById(userId); if (user != null) { // 3. 回填缓存 redisTemplate.opsForValue().set(cacheKey, user, 30, TimeUnit.MINUTES); } return user; } } 2.3 加锁策略（读写锁、分布式锁） 通过加锁来保证写操作和读操作的互斥，避免并发不一致。\n读写锁 读锁（共享锁）：多个线程可以同时读，但不能写。 写锁（排他锁）：写时独占，其他线程不能读也不能写。 代码实现（Redisson 实现） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 @Service public class UserServiceWithLock { @Autowired private UserMapper userMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; @Autowired private RedissonClient redissonClient; private static final String USER_CACHE_PREFIX = \u0026#34;user:\u0026#34;; private static final String LOCK_PREFIX = \u0026#34;lock:user:\u0026#34;; /** * 使用读写锁查询用户 */ public User getUserWithReadLock(Long userId) { String lockKey = LOCK_PREFIX + userId; RReadWriteLock rwLock = redissonClient.getReadWriteLock(lockKey); RLock readLock = rwLock.readLock(); try { readLock.lock(); // 1. 先查缓存 String cacheKey = USER_CACHE_PREFIX + userId; User user = (User) redisTemplate.opsForValue().get(cacheKey); if (user != null) { log.info(\u0026#34;缓存命中，用户ID: {}\u0026#34;, userId); return user; } // 2. 缓存未命中，查数据库 log.info(\u0026#34;缓存未命中，查询数据库，用户ID: {}\u0026#34;, userId); user = userMapper.selectById(userId); if (user != null) { // 3. 回填缓存 redisTemplate.opsForValue().set(cacheKey, user, 30, TimeUnit.MINUTES); log.info(\u0026#34;数据回填缓存，用户ID: {}\u0026#34;, userId); } return user; } finally { readLock.unlock(); } } /** * 使用写锁更新用户 */ @Transactional public boolean updateUserWithWriteLock(User user) { String lockKey = LOCK_PREFIX + user.getId(); RReadWriteLock rwLock = redissonClient.getReadWriteLock(lockKey); RLock writeLock = rwLock.writeLock(); try { writeLock.lock(); // 1. 更新数据库 int result = userMapper.updateById(user); if (result \u0026lt;= 0) { log.warn(\u0026#34;更新用户失败，用户ID: {}\u0026#34;, user.getId()); return false; } // 2. 删除缓存 String cacheKey = USER_CACHE_PREFIX + user.getId(); redisTemplate.delete(cacheKey); log.info(\u0026#34;删除缓存成功，用户ID: {}\u0026#34;, user.getId()); return true; } catch (Exception e) { log.error(\u0026#34;更新用户异常，用户ID: {}\u0026#34;, user.getId(), e); throw new RuntimeException(\u0026#34;更新用户失败\u0026#34;, e); } finally { writeLock.unlock(); } } /** * 使用分布式锁更新用户 */ @Transactional public boolean updateUserWithDistributedLock(User user) { String lockKey = LOCK_PREFIX + user.getId(); RLock lock = redissonClient.getLock(lockKey); try { // 尝试获取锁，最多等待10秒，锁持有时间30秒 boolean acquired = lock.tryLock(10, 30, TimeUnit.SECONDS); if (!acquired) { log.warn(\u0026#34;获取分布式锁失败，用户ID: {}\u0026#34;, user.getId()); return false; } // 1. 更新数据库 int result = userMapper.updateById(user); if (result \u0026lt;= 0) { log.warn(\u0026#34;更新用户失败，用户ID: {}\u0026#34;, user.getId()); return false; } // 2. 删除缓存 String cacheKey = USER_CACHE_PREFIX + user.getId(); redisTemplate.delete(cacheKey); log.info(\u0026#34;删除缓存成功，用户ID: {}\u0026#34;, user.getId()); return true; } catch (InterruptedException e) { Thread.currentThread().interrupt(); log.error(\u0026#34;获取分布式锁被中断，用户ID: {}\u0026#34;, user.getId(), e); return false; } catch (Exception e) { log.error(\u0026#34;更新用户异常，用户ID: {}\u0026#34;, user.getId(), e); throw new RuntimeException(\u0026#34;更新用户失败\u0026#34;, e); } finally { if (lock.isHeldByCurrentThread()) { lock.unlock(); } } } } 优点 能保证强一致性，避免脏读、脏写 特别适合对一致性要求高的业务 缺点 性能损耗较大，高并发下容易成为瓶颈 如果锁释放失败，可能导致死锁 通俗类比 图书馆借书：多个人同时看同一本书没问题（读读不互斥）。如果有人要在书上写笔记（写操作），那必须独占这本书，别人不能再看（读写互斥、写写互斥）。\n2.4 消息队列同步 更新数据库后，向消息队列发送更新事件，消费者订阅后更新缓存。\n代码实现 生产者（更新数据库后发送消息）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 @Service public class UserServiceWithMQ { @Autowired private UserMapper userMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; @Autowired private RabbitTemplate rabbitTemplate; private static final String USER_CACHE_PREFIX = \u0026#34;user:\u0026#34;; private static final String USER_UPDATE_QUEUE = \u0026#34;user.update.queue\u0026#34;; private static final String USER_DELETE_QUEUE = \u0026#34;user.delete.queue\u0026#34;; /** * 更新用户并发送消息 */ @Transactional public boolean updateUserWithMQ(User user) { try { // 1. 更新数据库 int result = userMapper.updateById(user); if (result \u0026lt;= 0) { return false; } // 2. 发送更新消息 UserUpdateEvent event = new UserUpdateEvent(); event.setUserId(user.getId()); event.setOperation(\u0026#34;UPDATE\u0026#34;); event.setTimestamp(System.currentTimeMillis()); rabbitTemplate.convertAndSend(USER_UPDATE_QUEUE, event); log.info(\u0026#34;发送用户更新消息，用户ID: {}\u0026#34;, user.getId()); return true; } catch (Exception e) { log.error(\u0026#34;更新用户异常，用户ID: {}\u0026#34;, user.getId(), e); throw new RuntimeException(\u0026#34;更新用户失败\u0026#34;, e); } } /** * 删除用户并发送消息 */ @Transactional public boolean deleteUserWithMQ(Long userId) { try { // 1. 删除数据库记录 int result = userMapper.deleteById(userId); if (result \u0026lt;= 0) { return false; } // 2. 发送删除消息 UserDeleteEvent event = new UserDeleteEvent(); event.setUserId(userId); event.setOperation(\u0026#34;DELETE\u0026#34;); event.setTimestamp(System.currentTimeMillis()); rabbitTemplate.convertAndSend(USER_DELETE_QUEUE, event); log.info(\u0026#34;发送用户删除消息，用户ID: {}\u0026#34;, userId); return true; } catch (Exception e) { log.error(\u0026#34;删除用户异常，用户ID: {}\u0026#34;, userId, e); throw new RuntimeException(\u0026#34;删除用户失败\u0026#34;, e); } } } // 事件类 @Data public class UserUpdateEvent { private Long userId; private String operation; private Long timestamp; } @Data public class UserDeleteEvent { private Long userId; private String operation; private Long timestamp; } 消费者（处理消息并更新缓存）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 @Component public class UserCacheConsumer { @Autowired private UserMapper userMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; private static final String USER_CACHE_PREFIX = \u0026#34;user:\u0026#34;; /** * 处理用户更新消息 */ @RabbitListener(queues = \u0026#34;user.update.queue\u0026#34;) public void handleUserUpdate(UserUpdateEvent event) { try { log.info(\u0026#34;收到用户更新消息，用户ID: {}\u0026#34;, event.getUserId()); // 1. 查询最新数据 User user = userMapper.selectById(event.getUserId()); if (user != null) { // 2. 更新缓存 String cacheKey = USER_CACHE_PREFIX + user.getId(); redisTemplate.opsForValue().set(cacheKey, user, 30, TimeUnit.MINUTES); log.info(\u0026#34;缓存更新成功，用户ID: {}\u0026#34;, user.getId()); } else { // 3. 如果用户不存在，删除缓存 String cacheKey = USER_CACHE_PREFIX + event.getUserId(); redisTemplate.delete(cacheKey); log.info(\u0026#34;用户不存在，删除缓存，用户ID: {}\u0026#34;, event.getUserId()); } } catch (Exception e) { log.error(\u0026#34;处理用户更新消息异常，用户ID: {}\u0026#34;, event.getUserId(), e); // 这里可以实现重试机制或死信队列 } } /** * 处理用户删除消息 */ @RabbitListener(queues = \u0026#34;user.delete.queue\u0026#34;) public void handleUserDelete(UserDeleteEvent event) { try { log.info(\u0026#34;收到用户删除消息，用户ID: {}\u0026#34;, event.getUserId()); // 删除缓存 String cacheKey = USER_CACHE_PREFIX + event.getUserId(); redisTemplate.delete(cacheKey); log.info(\u0026#34;缓存删除成功，用户ID: {}\u0026#34;, event.getUserId()); } catch (Exception e) { log.error(\u0026#34;处理用户删除消息异常，用户ID: {}\u0026#34;, event.getUserId(), e); } } } 优点 数据库与缓存解耦，保证异步最终一致性 能承受更高的并发量 缺点 引入 MQ 增加系统复杂度 消息丢失或重复消费需要额外处理 通俗类比 你搬家了，先在系统里改了地址（数据库）。系统发了一条通知（消息队列），告诉快递公司更新收件地址（缓存）。\n2.5 基于 Binlog 的 Canal 同步 通过监听 MySQL 的 Binlog，捕获数据变更事件，然后更新 Redis。\n流程 MySQL 开启 Binlog Canal 作为从库伪装，订阅 Binlog Binlog 里记录了 INSERT/UPDATE/DELETE Canal 解析事件并回写 Redis 代码实现 Canal 配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # canal.properties canal.port = 11111 canal.metrics.pull.port = 11112 canal.zkServers = localhost:2181 # 实例配置 canal.destinations = example canal.conf.dir = /opt/canal/conf canal.instance.global.master.address = 127.0.0.1:3306 canal.instance.global.master.journal.name = canal.instance.global.master.position = canal.instance.global.master.timestamp = canal.instance.global.master.gtid = canal.instance.dbUsername = canal canal.instance.dbPassword = canal canal.instance.connectionCharset = UTF-8 canal.instance.filter.regex = .*\\\\..* canal.instance.master.address = 127.0.0.1:3306 canal.instance.master.journal.name = canal.instance.master.position = canal.instance.master.timestamp = canal.instance.master.gtid = Canal 客户端代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 @Component public class CanalClient { @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; private static final String USER_CACHE_PREFIX = \u0026#34;user:\u0026#34;; private static final String USER_TABLE = \u0026#34;t_user\u0026#34;; @PostConstruct public void startCanalClient() { // 创建Canal连接 CanalConnector connector = CanalConnectors.newSingleConnector( new InetSocketAddress(\u0026#34;127.0.0.1\u0026#34;, 11111), \u0026#34;example\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;\u0026#34; ); try { connector.connect(); connector.subscribe(\u0026#34;.*\\\\..*\u0026#34;); connector.rollback(); while (true) { Message message = connector.getWithoutAck(1000); long batchId = message.getBatchId(); int size = message.getEntries().size(); if (batchId == -1 || size == 0) { Thread.sleep(1000); } else { printEntry(message.getEntries()); connector.ack(batchId); } } } catch (Exception e) { log.error(\u0026#34;Canal客户端异常\u0026#34;, e); } finally { connector.disconnect(); } } private void printEntry(List\u0026lt;Entry\u0026gt; entries) { for (Entry entry : entries) { if (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) { continue; } RowChange rowChange = null; try { rowChange = RowChange.parseFrom(entry.getStoreValue()); } catch (Exception e) { throw new RuntimeException(\u0026#34;解析binlog异常\u0026#34;, e); } EventType eventType = rowChange.getEventType(); String tableName = entry.getHeader().getTableName(); // 只处理用户表 if (!USER_TABLE.equals(tableName)) { continue; } for (RowData rowData : rowChange.getRowDatasList()) { if (eventType == EventType.DELETE) { handleDelete(rowData.getBeforeColumnsList()); } else if (eventType == EventType.INSERT) { handleInsert(rowData.getAfterColumnsList()); } else if (eventType == EventType.UPDATE) { handleUpdate(rowData.getAfterColumnsList()); } } } } private void handleInsert(List\u0026lt;Column\u0026gt; columns) { try { User user = buildUserFromColumns(columns); String cacheKey = USER_CACHE_PREFIX + user.getId(); redisTemplate.opsForValue().set(cacheKey, user, 30, TimeUnit.MINUTES); log.info(\u0026#34;Canal同步新增用户到缓存，用户ID: {}\u0026#34;, user.getId()); } catch (Exception e) { log.error(\u0026#34;处理新增用户异常\u0026#34;, e); } } private void handleUpdate(List\u0026lt;Column\u0026gt; columns) { try { User user = buildUserFromColumns(columns); String cacheKey = USER_CACHE_PREFIX + user.getId(); redisTemplate.opsForValue().set(cacheKey, user, 30, TimeUnit.MINUTES); log.info(\u0026#34;Canal同步更新用户到缓存，用户ID: {}\u0026#34;, user.getId()); } catch (Exception e) { log.error(\u0026#34;处理更新用户异常\u0026#34;, e); } } private void handleDelete(List\u0026lt;Column\u0026gt; columns) { try { Long userId = getUserIdFromColumns(columns); String cacheKey = USER_CACHE_PREFIX + userId; redisTemplate.delete(cacheKey); log.info(\u0026#34;Canal同步删除用户缓存，用户ID: {}\u0026#34;, userId); } catch (Exception e) { log.error(\u0026#34;处理删除用户异常\u0026#34;, e); } } private User buildUserFromColumns(List\u0026lt;Column\u0026gt; columns) { User user = new User(); for (Column column : columns) { String name = column.getName(); String value = column.getValue(); switch (name) { case \u0026#34;id\u0026#34;: user.setId(Long.valueOf(value)); break; case \u0026#34;username\u0026#34;: user.setUsername(value); break; case \u0026#34;email\u0026#34;: user.setEmail(value); break; case \u0026#34;phone\u0026#34;: user.setPhone(value); break; case \u0026#34;create_time\u0026#34;: user.setCreateTime(LocalDateTime.parse(value)); break; case \u0026#34;update_time\u0026#34;: user.setUpdateTime(LocalDateTime.parse(value)); break; } } return user; } private Long getUserIdFromColumns(List\u0026lt;Column\u0026gt; columns) { for (Column column : columns) { if (\u0026#34;id\u0026#34;.equals(column.getName())) { return Long.valueOf(column.getValue()); } } return null; } } 优点 数据库是最终数据源，Canal 保证数据库和缓存高度一致 适合强一致性、读写频繁的场景 缺点 Canal 部署和维护成本较高 实时性取决于 Binlog 解析和消费速度 通俗类比 就像你给家里装了一个监控（Canal），每次有人开门换锁（数据库更新），监控立刻通知保安（Redis 更新）。\n三、方案对比总结 方案 一致性 性能 复杂度 适用场景 Cache Aside 弱一致性 高 低 读多写少，数据允许短暂不一致 延时双删 较强一致性 中 中 能容忍短延迟，写请求较多时 加锁策略 强一致性 低 中 金融、电商等对一致性要求高 消息队列同步 最终一致性 高 高 高并发、异步场景 Canal Binlog 同步 准实时强一致性 中 高 核心业务，强一致要求 四、最佳实践建议 读多写少，数据允许短暂不一致 → 使用 Cache Aside 高并发写场景 → 延时双删 + 合理时间窗口 金融、交易业务 → 分布式读写锁，保证强一致性 高可扩展、高并发 → 数据库写 + MQ 异步更新缓存 企业级核心业务 → Binlog + Canal，保证数据库与缓存实时同步 五、实际项目中的综合方案 在实际项目中，往往需要根据不同的业务场景采用不同的策略：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 @Service public class UserServiceComprehensive { @Autowired private UserMapper userMapper; @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; @Autowired private RedissonClient redissonClient; @Autowired private RabbitTemplate rabbitTemplate; private static final String USER_CACHE_PREFIX = \u0026#34;user:\u0026#34;; private static final String LOCK_PREFIX = \u0026#34;lock:user:\u0026#34;; /** * 根据业务类型选择不同的缓存策略 */ public User getUser(Long userId, CacheStrategy strategy) { switch (strategy) { case CACHE_ASIDE: return getUserWithCacheAside(userId); case READ_WRITE_LOCK: return getUserWithReadWriteLock(userId); case MQ_SYNC: return getUserWithMQSync(userId); default: return getUserWithCacheAside(userId); } } /** * 根据业务类型选择不同的更新策略 */ public boolean updateUser(User user, CacheStrategy strategy) { switch (strategy) { case CACHE_ASIDE: return updateUserWithCacheAside(user); case DELAY_DOUBLE_DELETE: return updateUserWithDelayDoubleDelete(user); case READ_WRITE_LOCK: return updateUserWithReadWriteLock(user); case MQ_SYNC: return updateUserWithMQSync(user); default: return updateUserWithCacheAside(user); } } // 各种策略的具体实现... } enum CacheStrategy { CACHE_ASIDE, // 旁路缓存 DELAY_DOUBLE_DELETE, // 延时双删 READ_WRITE_LOCK, // 读写锁 MQ_SYNC, // 消息队列同步 CANAL_SYNC // Canal同步 } 六、监控和告警 为了保证缓存一致性，还需要完善的监控体系：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @Component public class CacheConsistencyMonitor { @Autowired private RedisTemplate\u0026lt;String, Object\u0026gt; redisTemplate; @Autowired private UserMapper userMapper; /** * 定期检查缓存一致性 */ @Scheduled(fixedRate = 300000) // 5分钟检查一次 public void checkCacheConsistency() { // 随机抽样检查缓存一致性 List\u0026lt;Long\u0026gt; userIds = getRandomUserIds(100); for (Long userId : userIds) { try { // 1. 查询数据库 User dbUser = userMapper.selectById(userId); // 2. 查询缓存 String cacheKey = \u0026#34;user:\u0026#34; + userId; User cacheUser = (User) redisTemplate.opsForValue().get(cacheKey); // 3. 比较数据 if (dbUser != null \u0026amp;\u0026amp; cacheUser != null) { if (!Objects.equals(dbUser.getUsername(), cacheUser.getUsername()) || !Objects.equals(dbUser.getEmail(), cacheUser.getEmail())) { // 数据不一致，记录告警 log.warn(\u0026#34;发现缓存不一致，用户ID: {}, 数据库: {}, 缓存: {}\u0026#34;, userId, dbUser, cacheUser); // 修复缓存 redisTemplate.opsForValue().set(cacheKey, dbUser, 30, TimeUnit.MINUTES); } } } catch (Exception e) { log.error(\u0026#34;检查缓存一致性异常，用户ID: {}\u0026#34;, userId, e); } } } private List\u0026lt;Long\u0026gt; getRandomUserIds(int count) { // 实现随机获取用户ID的逻辑 return userMapper.selectRandomUserIds(count); } } 七、结语 数据库与 Redis 的一致性问题，本质是 如何处理\u0026quot;两个副本数据的不同步\u0026quot;。\n没有一种万能方案，需要结合业务特点选择：\n性能优先 → Cache Aside 一致性优先 → 加锁 / Canal 折中 → 延时双删 / MQ 在真实项目中，往往是 多种方案结合 使用，才能既保证性能，又保证数据可靠。\n通过本文的详细分析和代码示例，相信你已经对缓存一致性问题有了深入的理解。在实际开发中，要根据具体的业务场景、性能要求、一致性要求来选择最适合的方案，并在必要时结合多种策略来实现最佳效果。\n本文档详细介绍了数据库与Redis双写一致性问题的各种解决方案，并提供了完整的代码实现示例，帮助开发者在实际项目中做出正确的技术选择。\n","date":"2025-08-14T00:00:00Z","permalink":"https://Yin123-ybh.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E-redis-%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E5%85%A8%E8%A7%A3%E6%9E%90/","title":"数据库与 Redis 双写一致性问题全解析"},{"content":"秒杀活动功能完善指南 - 第一部分 目录 项目概述 数据库设计 后端核心功能实现 项目概述 功能目标 实现高并发的秒杀活动系统 防止超卖和重复参与 支持分布式部署 提供用户友好的界面 技术栈 后端: Spring Boot + MyBatis + Redis + Redisson 前端: Vue.js + Element UI 数据库: MySQL 缓存: Redis 分布式锁: Redisson 数据库设计 1. 秒杀参与记录表 1 2 3 4 5 6 7 8 9 10 11 12 13 CREATE TABLE seckill_participant ( id BIGINT AUTO_INCREMENT COMMENT \u0026#39;主键ID\u0026#39;, activity_id BIGINT NOT NULL COMMENT \u0026#39;秒杀活动ID\u0026#39;, user_id BIGINT NOT NULL COMMENT \u0026#39;用户ID\u0026#39;, quantity INT NOT NULL COMMENT \u0026#39;参与数量\u0026#39;, status TINYINT(1) DEFAULT 0 COMMENT \u0026#39;状态：0-待处理，1-成功，2-失败\u0026#39;, create_time DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT \u0026#39;创建时间\u0026#39;, update_time DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;更新时间\u0026#39;, PRIMARY KEY (id), UNIQUE KEY uk_user_activity (user_id, activity_id), KEY idx_activity_id (activity_id), KEY idx_user_id (user_id) ) COMMENT=\u0026#39;秒杀参与记录表\u0026#39;; 2. 秒杀订单表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 CREATE TABLE seckill_order ( id BIGINT AUTO_INCREMENT COMMENT \u0026#39;主键ID\u0026#39;, activity_id BIGINT NOT NULL COMMENT \u0026#39;秒杀活动ID\u0026#39;, user_id BIGINT NOT NULL COMMENT \u0026#39;用户ID\u0026#39;, dish_id BIGINT NOT NULL COMMENT \u0026#39;商品ID\u0026#39;, quantity INT NOT NULL COMMENT \u0026#39;购买数量\u0026#39;, seckill_price DECIMAL(10,2) NOT NULL COMMENT \u0026#39;秒杀价格\u0026#39;, total_amount DECIMAL(10,2) NOT NULL COMMENT \u0026#39;总金额\u0026#39;, status TINYINT(1) DEFAULT 0 COMMENT \u0026#39;订单状态：0-待支付，1-已支付，2-已取消\u0026#39;, create_time DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT \u0026#39;创建时间\u0026#39;, update_time DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT \u0026#39;更新时间\u0026#39;, PRIMARY KEY (id), KEY idx_activity_id (activity_id), KEY idx_user_id (user_id) ) COMMENT=\u0026#39;秒杀订单表\u0026#39;; 3. 库存扣减记录表 1 2 3 4 5 6 7 8 9 10 11 12 13 CREATE TABLE seckill_stock_log ( id BIGINT AUTO_INCREMENT COMMENT \u0026#39;主键ID\u0026#39;, activity_id BIGINT NOT NULL COMMENT \u0026#39;秒杀活动ID\u0026#39;, user_id BIGINT NOT NULL COMMENT \u0026#39;用户ID\u0026#39;, quantity INT NOT NULL COMMENT \u0026#39;扣减数量\u0026#39;, before_stock INT NOT NULL COMMENT \u0026#39;扣减前库存\u0026#39;, after_stock INT NOT NULL COMMENT \u0026#39;扣减后库存\u0026#39;, status TINYINT(1) DEFAULT 1 COMMENT \u0026#39;状态：1-成功，0-失败\u0026#39;, create_time DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT \u0026#39;创建时间\u0026#39;, PRIMARY KEY (id), KEY idx_activity_id (activity_id), KEY idx_user_id (user_id) ) COMMENT=\u0026#39;库存扣减记录表\u0026#39;; 后端核心功能实现 1. 创建实体类 1.1 秒杀参与记录实体 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // 文件路径: sky-pojo/src/main/java/com/sky/entity/SeckillParticipant.java package com.sky.entity; import lombok.AllArgsConstructor; import lombok.Builder; import lombok.Data; import lombok.NoArgsConstructor; import java.io.Serializable; import java.time.LocalDateTime; @Data @Builder @NoArgsConstructor @AllArgsConstructor public class SeckillParticipant implements Serializable { private static final long serialVersionUID = 1L; private Long id; private Long activityId; private Long userId; private Integer quantity; private Integer status; private LocalDateTime createTime; private LocalDateTime updateTime; } 1.2 秒杀订单实体 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // 文件路径: sky-pojo/src/main/java/com/sky/entity/SeckillOrder.java package com.sky.entity; import lombok.AllArgsConstructor; import lombok.Builder; import lombok.Data; import lombok.NoArgsConstructor; import java.io.Serializable; import java.math.BigDecimal; import java.time.LocalDateTime; @Data @Builder @NoArgsConstructor @AllArgsConstructor public class SeckillOrder implements Serializable { private static final long serialVersionUID = 1L; private Long id; private Long activityId; private Long userId; private Long dishId; private Integer quantity; private BigDecimal seckillPrice; private BigDecimal totalAmount; private Integer status; private LocalDateTime createTime; private LocalDateTime updateTime; } 2. 创建DTO类 2.1 秒杀参与DTO 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 文件路径: sky-pojo/src/main/java/com/sky/dto/SeckillParticipateDTO.java package com.sky.dto; import lombok.Data; import java.io.Serializable; @Data public class SeckillParticipateDTO implements Serializable { private static final long serialVersionUID = 1L; private Long activityId; private Long userId; private Integer quantity; } 3. 创建Mapper接口 3.1 秒杀参与记录Mapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // 文件路径: sky-server/src/main/java/com/sky/mapper/SeckillParticipantMapper.java package com.sky.mapper; import com.sky.entity.SeckillParticipant; import org.apache.ibatis.annotations.Mapper; import org.apache.ibatis.annotations.Param; @Mapper public interface SeckillParticipantMapper { void insert(SeckillParticipant participant); SeckillParticipant getByUserAndActivity(@Param(\u0026#34;userId\u0026#34;) Long userId, @Param(\u0026#34;activityId\u0026#34;) Long activityId); void updateStatus(@Param(\u0026#34;id\u0026#34;) Long id, @Param(\u0026#34;status\u0026#34;) Integer status); } 3.2 秒杀订单Mapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // 文件路径: sky-server/src/main/java/com/sky/mapper/SeckillOrderMapper.java package com.sky.mapper; import com.sky.entity.SeckillOrder; import org.apache.ibatis.annotations.Mapper; import org.apache.ibatis.annotations.Param; @Mapper public interface SeckillOrderMapper { void insert(SeckillOrder order); SeckillOrder getById(@Param(\u0026#34;id\u0026#34;) Long id); void updateStatus(@Param(\u0026#34;id\u0026#34;) Long id, @Param(\u0026#34;status\u0026#34;) Integer status); } 4. 创建Mapper XML文件 4.1 秒杀参与记录Mapper XML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;!-- 文件路径: sky-server/src/main/resources/mapper/SeckillParticipantMapper.xml --\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper 3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34; \u0026gt; \u0026lt;mapper namespace=\u0026#34;com.sky.mapper.SeckillParticipantMapper\u0026#34;\u0026gt; \u0026lt;insert id=\u0026#34;insert\u0026#34; useGeneratedKeys=\u0026#34;true\u0026#34; keyProperty=\u0026#34;id\u0026#34;\u0026gt; INSERT INTO seckill_participant (activity_id, user_id, quantity, status, create_time, update_time) VALUES (#{activityId}, #{userId}, #{quantity}, #{status}, #{createTime}, #{updateTime}) \u0026lt;/insert\u0026gt; \u0026lt;select id=\u0026#34;getByUserAndActivity\u0026#34; resultType=\u0026#34;com.sky.entity.SeckillParticipant\u0026#34;\u0026gt; SELECT * FROM seckill_participant WHERE user_id = #{userId} AND activity_id = #{activityId} \u0026lt;/select\u0026gt; \u0026lt;update id=\u0026#34;updateStatus\u0026#34;\u0026gt; UPDATE seckill_participant SET status = #{status}, update_time = NOW() WHERE id = #{id} \u0026lt;/update\u0026gt; \u0026lt;/mapper\u0026gt; 4.2 秒杀订单Mapper XML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;!-- 文件路径: sky-server/src/main/resources/mapper/SeckillOrderMapper.xml --\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper 3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34; \u0026gt; \u0026lt;mapper namespace=\u0026#34;com.sky.mapper.SeckillOrderMapper\u0026#34;\u0026gt; \u0026lt;insert id=\u0026#34;insert\u0026#34; useGeneratedKeys=\u0026#34;true\u0026#34; keyProperty=\u0026#34;id\u0026#34;\u0026gt; INSERT INTO seckill_order (activity_id, user_id, dish_id, quantity, seckill_price, total_amount, status, create_time, update_time) VALUES (#{activityId}, #{userId}, #{dishId}, #{quantity}, #{seckillPrice}, #{totalAmount}, #{status}, #{createTime}, #{updateTime}) \u0026lt;/insert\u0026gt; \u0026lt;select id=\u0026#34;getById\u0026#34; resultType=\u0026#34;com.sky.entity.SeckillOrder\u0026#34;\u0026gt; SELECT * FROM seckill_order WHERE id = #{id} \u0026lt;/select\u0026gt; \u0026lt;update id=\u0026#34;updateStatus\u0026#34;\u0026gt; UPDATE seckill_order SET status = #{status}, update_time = NOW() WHERE id = #{id} \u0026lt;/update\u0026gt; \u0026lt;/mapper\u0026gt; 5. 创建Lua脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 -- 文件路径: sky-server/src/main/resources/seckill_participate.lua -- 秒杀参与Lua脚本 -- KEYS[1] = seckill:stock:{activityId} -- KEYS[2] = seckill:participants:{activityId} -- ARGV[1] = userId -- ARGV[2] = quantity -- ARGV[3] = perUserLimit -- 检查用户是否已参与 local isParticipated = redis.call(\u0026#39;SISMEMBER\u0026#39;, KEYS[2], ARGV[1]) if isParticipated == 1 then return {0, \u0026#39;用户已参与该活动\u0026#39;} end -- 检查库存是否充足 local stock = redis.call(\u0026#39;GET\u0026#39;, KEYS[1]) if not stock then return {0, \u0026#39;活动不存在\u0026#39;} end stock = tonumber(stock) local quantity = tonumber(ARGV[2]) local perUserLimit = tonumber(ARGV[3]) if stock \u0026lt; quantity then return {0, \u0026#39;库存不足\u0026#39;} end if quantity \u0026gt; perUserLimit then return {0, \u0026#39;超过限购数量\u0026#39;} end -- 扣减库存 local newStock = redis.call(\u0026#39;DECRBY\u0026#39;, KEYS[1], quantity) if newStock \u0026lt; 0 then -- 回滚库存 redis.call(\u0026#39;INCRBY\u0026#39;, KEYS[1], quantity) return {0, \u0026#39;库存不足\u0026#39;} end -- 记录用户参与 redis.call(\u0026#39;SADD\u0026#39;, KEYS[2], ARGV[1]) -- 设置过期时间（活动结束后清理） redis.call(\u0026#39;EXPIRE\u0026#39;, KEYS[2], 86400) return {1, \u0026#39;参与成功\u0026#39;, newStock} 6. 增强SeckillActivityService 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 // 在 SeckillActivityServiceImpl.java 中添加以下方法 @Autowired private RedisTemplate redisTemplate; @Autowired private RedissonClient redissonClient; @Autowired private SeckillParticipantMapper seckillParticipantMapper; @Autowired private SeckillOrderMapper seckillOrderMapper; @Value(\u0026#34;${sky.redis.seckill.prefix:seckill:}\u0026#34;) private String seckillPrefix; /** * 参与秒杀活动 */ @Override public String participateSeckill(Long activityId, Long userId, Integer quantity) { // 1. 获取活动信息 SeckillActivity activity = getById(activityId); if (activity == null) { return \u0026#34;活动不存在\u0026#34;; } // 2. 检查活动状态 if (activity.getStatus() != 1) { return \u0026#34;活动已禁用\u0026#34;; } LocalDateTime now = LocalDateTime.now(); if (now.isBefore(activity.getStartTime())) { return \u0026#34;活动未开始\u0026#34;; } if (now.isAfter(activity.getEndTime())) { return \u0026#34;活动已结束\u0026#34;; } // 3. 使用分布式锁防止重复参与 String lockKey = seckillPrefix + \u0026#34;lock:\u0026#34; + activityId; RLock lock = redissonClient.getLock(lockKey); try { if (lock.tryLock(10, 30, TimeUnit.SECONDS)) { // 4. 执行Lua脚本 String stockKey = seckillPrefix + \u0026#34;stock:\u0026#34; + activityId; String participantsKey = seckillPrefix + \u0026#34;participants:\u0026#34; + activityId; DefaultRedisScript\u0026lt;Object\u0026gt; script = new DefaultRedisScript\u0026lt;\u0026gt;(); script.setScriptSource(new ResourceScriptSource(new ClassPathResource(\u0026#34;seckill_participate.lua\u0026#34;))); script.setResultType(Object.class); List\u0026lt;String\u0026gt; keys = Arrays.asList(stockKey, participantsKey); Object[] args = {userId.toString(), quantity.toString(), activity.getPerUserLimit().toString()}; Object result = redisTemplate.execute(script, keys, args); if (result != null \u0026amp;\u0026amp; result instanceof List) { List resultList = (List) result; if (resultList.size() \u0026gt; 0) { Integer success = (Integer) resultList.get(0); if (success == 1) { // 5. 记录参与记录 SeckillParticipant participant = SeckillParticipant.builder() .activityId(activityId) .userId(userId) .quantity(quantity) .status(1) .createTime(now) .updateTime(now) .build(); seckillParticipantMapper.insert(participant); // 6. 异步处理订单 processSeckillOrderAsync(activity, userId, quantity); return \u0026#34;参与成功\u0026#34;; } else { return (String) resultList.get(1); } } } return \u0026#34;参与失败\u0026#34;; } else { return \u0026#34;系统繁忙，请稍后重试\u0026#34;; } } catch (Exception e) { log.error(\u0026#34;参与秒杀活动异常\u0026#34;, e); return \u0026#34;参与失败，请重试\u0026#34;; } finally { if (lock.isHeldByCurrentThread()) { lock.unlock(); } } /** * 异步处理秒杀订单 */ @Async public void processSeckillOrderAsync(SeckillActivity activity, Long userId, Integer quantity) { try { // 创建秒杀订单 SeckillOrder order = SeckillOrder.builder() .activityId(activity.getId()) .userId(userId) .dishId(activity.getDishId()) .quantity(quantity) .seckillPrice(activity.getSeckillPrice()) .totalAmount(activity.getSeckillPrice().multiply(new BigDecimal(quantity))) .status(0) .createTime(LocalDateTime.now()) .updateTime(LocalDateTime.now()) .build(); seckillOrderMapper.insert(order); // 更新数据库库存 updateDatabaseStock(activity.getId(), quantity); log.info(\u0026#34;秒杀订单创建成功：orderId={}, userId={}, activityId={}\u0026#34;, order.getId(), userId, activity.getId()); } catch (Exception e) { log.error(\u0026#34;处理秒杀订单异常\u0026#34;, e); } } /** * 更新数据库库存 */ @Async public void updateDatabaseStock(Long activityId, Integer quantity) { try { seckillActivityMapper.reduceStock(activityId, quantity); seckillActivityMapper.increaseSoldCount(activityId, quantity); } catch (Exception e) { log.error(\u0026#34;更新数据库库存异常\u0026#34;, e); } } 7. 创建用户端控制器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // 文件路径: sky-server/src/main/java/com/sky/controller/user/SeckillActivityController.java package com.sky.controller.user; import com.sky.entity.SeckillActivity; import com.sky.result.Result; import com.sky.service.SeckillActivityService; import io.swagger.annotations.Api; import io.swagger.annotations.ApiOperation; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.*; import java.util.List; @RestController @RequestMapping(\u0026#34;/user/seckill/activity\u0026#34;) @Api(tags = \u0026#34;用户端秒杀活动\u0026#34;) @Slf4j public class SeckillActivityController { @Autowired private SeckillActivityService seckillActivityService; @GetMapping(\u0026#34;/current\u0026#34;) @ApiOperation(\u0026#34;获取当前进行中的秒杀活动\u0026#34;) public Result\u0026lt;List\u0026lt;SeckillActivity\u0026gt;\u0026gt; getCurrentActivities() { log.info(\u0026#34;获取当前进行中的秒杀活动\u0026#34;); List\u0026lt;SeckillActivity\u0026gt; activities = seckillActivityService.getCurrentActivities(); return Result.success(activities); } @GetMapping(\u0026#34;/{id}\u0026#34;) @ApiOperation(\u0026#34;根据id查询秒杀活动详情\u0026#34;) public Result\u0026lt;SeckillActivity\u0026gt; getById(@PathVariable Long id) { log.info(\u0026#34;根据id查询秒杀活动详情：{}\u0026#34;, id); SeckillActivity seckillActivity = seckillActivityService.getById(id); return Result.success(seckillActivity); } @PostMapping(\u0026#34;/participate/{id}\u0026#34;) @ApiOperation(\u0026#34;参与秒杀活动\u0026#34;) public Result\u0026lt;String\u0026gt; participateSeckill(@PathVariable Long id, @RequestParam Integer quantity) { log.info(\u0026#34;用户参与秒杀活动：id={}, quantity={}\u0026#34;, id, quantity); // 这里需要从JWT中获取用户ID，暂时使用固定值 Long userId = 1L; // 实际项目中从JWT中获取 String result = seckillActivityService.participateSeckill(id, userId, quantity); return Result.success(result); } } 总结 第一部分涵盖了秒杀活动功能的核心后端实现，包括：\n数据库设计 - 完整的表结构和索引设计 实体类创建 - 秒杀参与记录和订单实体 数据访问层 - Mapper接口和XML配置 核心业务逻辑 - 分布式锁、Redis缓存、Lua脚本 API接口 - 用户端控制器 这些是构建高并发秒杀系统的基础，下一部分将介绍前端界面开发和微信小程序集成。\n继续阅读：秒杀活动功能完善指南 - 第二部分\n","date":"2025-01-12T00:00:00Z","permalink":"https://Yin123-ybh.github.io/p/%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/","title":"秒杀活动功能完善指南 - 第一部分"},{"content":"秒杀活动功能完善指南 - 第二部分 目录 前端界面开发 微信小程序集成 测试和优化 GitHub Pages 部署指南 前端界面开发 1. 创建秒杀活动API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // 文件路径: src/api/seckill.js import request from \u0026#39;@/utils/request\u0026#39; export const seckillApi = { // 获取当前进行中的秒杀活动 getCurrentActivities() { return request({ url: \u0026#39;/user/seckill/activity/current\u0026#39;, method: \u0026#39;get\u0026#39; }) }, // 获取秒杀活动详情 getActivityDetail(id) { return request({ url: `/user/seckill/activity/${id}`, method: \u0026#39;get\u0026#39; }) }, // 参与秒杀活动 participateSeckill(id, quantity) { return request({ url: `/user/seckill/activity/participate/${id}`, method: \u0026#39;post\u0026#39;, params: { quantity } }) } } 2. 创建秒杀活动页面u0026lt;!-- 文件路径: src/views/seckill/index.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;seckill-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;seckill-header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;限时秒杀\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;抢购火爆商品，限时特价\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;seckill-content\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;activity in activities\u0026#34; :key=\u0026#34;activity.id\u0026#34; class=\u0026#34;seckill-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;product-info\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;activity.dishImage\u0026#34; :alt=\u0026#34;activity.dishName\u0026#34; class=\u0026#34;product-image\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;product-details\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;{{ activity.dishName }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;product-desc\u0026#34;\u0026gt;{{ activity.description }}\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;price-info\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;original-price\u0026#34;\u0026gt;¥{{ activity.originalPrice }}\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;seckill-price\u0026#34;\u0026gt;¥{{ activity.seckillPrice }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;seckill-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;stock-info\u0026#34;\u0026gt; \u0026lt;span\u0026gt;库存：{{ activity.stock - activity.soldCount }}/{{ activity.stock }}\u0026lt;/span\u0026gt; \u0026lt;div class=\u0026#34;progress-bar\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;progress\u0026#34; :style=\u0026#34;{ width: getStockPercent(activity) + \u0026#39;%\u0026#39; }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;time-info\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;getActivityStatus(activity) === \u0026#39;not-started\u0026#39;\u0026#34; class=\u0026#34;countdown\u0026#34;\u0026gt; \u0026lt;span\u0026gt;距离开始：\u0026lt;/span\u0026gt; \u0026lt;countdown :end-time=\u0026#34;activity.startTime\u0026#34; @finish=\u0026#34;onCountdownFinish\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div v-else-if=\u0026#34;getActivityStatus(activity) === \u0026#39;ended\u0026#39;\u0026#34; class=\u0026#34;ended\u0026#34;\u0026gt; 活动已结束 \u0026lt;/div\u0026gt; \u0026lt;div v-else class=\u0026#34;countdown\u0026#34;\u0026gt; \u0026lt;span\u0026gt;距离结束：\u0026lt;/span\u0026gt; \u0026lt;countdown :end-time=\u0026#34;activity.endTime\u0026#34; @finish=\u0026#34;onCountdownFinish\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;action-area\u0026#34;\u0026gt; \u0026lt;el-button v-if=\u0026#34;getActivityStatus(activity) === \u0026#39;active\u0026#39;\u0026#34; type=\u0026#34;danger\u0026#34; size=\u0026#34;large\u0026#34; :disabled=\u0026#34;!canParticipate(activity)\u0026#34; @click=\u0026#34;participateSeckill(activity)\u0026#34; \u0026gt; 立即抢购 \u0026lt;/el-button\u0026gt; \u0026lt;el-button v-else disabled size=\u0026#34;large\u0026#34;\u0026gt; {{ getButtonText(activity) }} \u0026lt;/el-button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { seckillApi } from \u0026#39;@/api/seckill\u0026#39; import Countdown from \u0026#39;@/components/Countdown\u0026#39; export default { name: \u0026#39;SeckillActivity\u0026#39;, components: { Countdown }, data() { return { activities: [], loading: false } }, created() { this.getCurrentActivities() }, methods: { async getCurrentActivities() { this.loading = true try { const response = await seckillApi.getCurrentActivities() if (response.data.code === 1) { this.activities = response.data.data } } catch (error) { console.error(\u0026#39;获取秒杀活动失败\u0026#39;, error) } finally { this.loading = false } }, async participateSeckill(activity) { try { const response = await seckillApi.participateSeckill(activity.id, 1) if (response.data.code === 1) { this.$message.success(response.data.data) this.getCurrentActivities() // 刷新列表 } else { this.$message.error(response.data.msg) } } catch (error) { console.error(\u0026#39;参与秒杀失败\u0026#39;, error) this.$message.error(\u0026#39;参与失败，请重试\u0026#39;) } }, getActivityStatus(activity) { const now = new Date() const startTime = new Date(activity.startTime) const endTime = new Date(activity.endTime) if (now \u0026lt; startTime) return \u0026#39;not-started\u0026#39; if (now \u0026gt; endTime) return \u0026#39;ended\u0026#39; return \u0026#39;active\u0026#39; }, getStockPercent(activity) { return ((activity.stock - activity.soldCount) / activity.stock) * 100 }, canParticipate(activity) { return activity.stock \u0026gt; activity.soldCount \u0026amp;\u0026amp; activity.status === 1 }, getButtonText(activity) { const status = this.getActivityStatus(activity) switch (status) { case \u0026#39;not-started\u0026#39;: return \u0026#39;未开始\u0026#39; case \u0026#39;ended\u0026#39;: return \u0026#39;已结束\u0026#39; default: return \u0026#39;立即抢购\u0026#39; } }, onCountdownFinish() { this.getCurrentActivities() } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .seckill-container { padding: 20px; } .seckill-header { text-align: center; margin-bottom: 30px; } .seckill-header h2 { color: #f56c6c; font-size: 28px; margin-bottom: 10px; } .seckill-content { display: grid; grid-template-columns: repeat(auto-fill, minmax(400px, 1fr)); gap: 20px; } .seckill-item { border: 1px solid #e4e7ed; border-radius: 8px; padding: 20px; background: #fff; box-shadow: 0 2px 4px rgba(0,0,0,0.1); } .product-info { display: flex; margin-bottom: 15px; } .product-image { width: 80px; height: 80px; object-fit: cover; border-radius: 4px; margin-right: 15px; } .product-details h3 { margin: 0 0 8px 0; font-size: 16px; color: #303133; } .product-desc { color: #909399; font-size: 12px; margin: 0 0 10px 0; } .price-info { display: flex; align-items: center; gap: 10px; } .original-price { text-decoration: line-through; color: #909399; font-size: 14px; } .seckill-price { color: #f56c6c; font-size: 18px; font-weight: bold; } .seckill-info { border-top: 1px solid #f0f0f0; padding-top: 15px; } .stock-info { margin-bottom: 10px; } .progress-bar { width: 100%; height: 6px; background: #f0f0f0; border-radius: 3px; overflow: hidden; margin-top: 5px; } .progress { height: 100%; background: linear-gradient(90deg, #f56c6c, #ff9a9a); transition: width 0.3s ease; } .time-info { margin-bottom: 15px; text-align: center; } .countdown { color: #f56c6c; font-weight: bold; } .ended { color: #909399; } .action-area { text-align: center; } .action-area .el-button { width: 100%; } \u0026lt;/style\u0026gt; 3. 创建倒计时组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 \u0026lt;!-- 文件路径: src/components/Countdown.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;span class=\u0026#34;countdown\u0026#34;\u0026gt; {{ formattedTime }} \u0026lt;/span\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { name: \u0026#39;Countdown\u0026#39;, props: { endTime: { type: String, required: true } }, data() { return { timeLeft: 0, timer: null } }, computed: { formattedTime() { const hours = Math.floor(this.timeLeft / 3600) const minutes = Math.floor((this.timeLeft % 3600) / 60) const seconds = this.timeLeft % 60 return `${hours.toString().padStart(2, \u0026#39;0\u0026#39;)}:${minutes.toString().padStart(2, \u0026#39;0\u0026#39;)}:${seconds.toString().padStart(2, \u0026#39;0\u0026#39;)}` } }, mounted() { this.startCountdown() }, beforeDestroy() { this.clearTimer() }, methods: { startCountdown() { this.updateTimeLeft() this.timer = setInterval(() =\u0026gt; { this.updateTimeLeft() }, 1000) }, updateTimeLeft() { const now = new Date().getTime() const end = new Date(this.endTime).getTime() this.timeLeft = Math.max(0, Math.floor((end - now) / 1000)) if (this.timeLeft \u0026lt;= 0) { this.clearTimer() this.$emit(\u0026#39;finish\u0026#39;) } }, clearTimer() { if (this.timer) { clearInterval(this.timer) this.timer = null } } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .countdown { font-family: \u0026#39;Courier New\u0026#39;, monospace; font-weight: bold; color: #f56c6c; } \u0026lt;/style\u0026gt; 微信小程序集成 1. 创建秒杀活动页面u0026lt;!-- 文件路径: pages/seckill/index.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;view class=\u0026#34;seckill-container\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;seckill-header\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;title\u0026#34;\u0026gt;限时秒杀\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;subtitle\u0026#34;\u0026gt;抢购火爆商品，限时特价\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;seckill-list\u0026#34;\u0026gt; \u0026lt;view v-for=\u0026#34;activity in activities\u0026#34; :key=\u0026#34;activity.id\u0026#34; class=\u0026#34;seckill-item\u0026#34;\u0026gt; \u0026lt;image :src=\u0026#34;activity.dishImage\u0026#34; class=\u0026#34;product-image\u0026#34; /\u0026gt; \u0026lt;view class=\u0026#34;product-info\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;product-name\u0026#34;\u0026gt;{{ activity.dishName }}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;product-desc\u0026#34;\u0026gt;{{ activity.description }}\u0026lt;/text\u0026gt; \u0026lt;view class=\u0026#34;price-info\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;original-price\u0026#34;\u0026gt;¥{{ activity.originalPrice }}\u0026lt;/text\u0026gt; \u0026lt;text class=\u0026#34;seckill-price\u0026#34;\u0026gt;¥{{ activity.seckillPrice }}\u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;seckill-action\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;stock-info\u0026#34;\u0026gt; \u0026lt;text class=\u0026#34;stock-text\u0026#34;\u0026gt;库存：{{ activity.stock - activity.soldCount }}/{{ activity.stock }}\u0026lt;/text\u0026gt; \u0026lt;view class=\u0026#34;progress-bar\u0026#34;\u0026gt; \u0026lt;view class=\u0026#34;progress\u0026#34; :style=\u0026#34;{ width: getStockPercent(activity) + \u0026#39;%\u0026#39; }\u0026#34;\u0026gt;\u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;view class=\u0026#34;time-info\u0026#34;\u0026gt; \u0026lt;text v-if=\u0026#34;getActivityStatus(activity) === \u0026#39;not-started\u0026#39;\u0026#34; class=\u0026#34;countdown\u0026#34;\u0026gt; 距离开始：{{ getCountdown(activity.startTime) }} \u0026lt;/text\u0026gt; \u0026lt;text v-else-if=\u0026#34;getActivityStatus(activity) === \u0026#39;ended\u0026#39;\u0026#34; class=\u0026#34;ended\u0026#34;\u0026gt; 活动已结束 \u0026lt;/text\u0026gt; \u0026lt;text v-else class=\u0026#34;countdown\u0026#34;\u0026gt; 距离结束：{{ getCountdown(activity.endTime) }} \u0026lt;/text\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;button v-if=\u0026#34;getActivityStatus(activity) === \u0026#39;active\u0026#39;\u0026#34; class=\u0026#34;seckill-btn\u0026#34; :disabled=\u0026#34;!canParticipate(activity)\u0026#34; @click=\u0026#34;participateSeckill(activity)\u0026#34; \u0026gt; 立即抢购 \u0026lt;/button\u0026gt; \u0026lt;button v-else class=\u0026#34;seckill-btn disabled\u0026#34;\u0026gt; {{ getButtonText(activity) }} \u0026lt;/button\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { activities: [], loading: false } }, onLoad() { this.getCurrentActivities() }, methods: { async getCurrentActivities() { this.loading = true try { const response = await uni.request({ url: \u0026#39;http://localhost:8080/user/seckill/activity/current\u0026#39;, method: \u0026#39;GET\u0026#39; }) if (response.data.code === 1) { this.activities = response.data.data } } catch (error) { console.error(\u0026#39;获取秒杀活动失败\u0026#39;, error) uni.showToast({ title: \u0026#39;获取活动失败\u0026#39;, icon: \u0026#39;none\u0026#39; }) } finally { this.loading = false } }, async participateSeckill(activity) { try { const response = await uni.request({ url: `http://localhost:8080/user/seckill/activity/participate/${activity.id}`, method: \u0026#39;POST\u0026#39;, data: { quantity: 1 } }) if (response.data.code === 1) { uni.showToast({ title: response.data.data, icon: \u0026#39;success\u0026#39; }) this.getCurrentActivities() } else { uni.showToast({ title: response.data.msg, icon: \u0026#39;none\u0026#39; }) } } catch (error) { console.error(\u0026#39;参与秒杀失败\u0026#39;, error) uni.showToast({ title: \u0026#39;参与失败，请重试\u0026#39;, icon: \u0026#39;none\u0026#39; }) } }, getActivityStatus(activity) { const now = new Date() const startTime = new Date(activity.startTime) const endTime = new Date(activity.endTime) if (now \u0026lt; startTime) return \u0026#39;not-started\u0026#39; if (now \u0026gt; endTime) return \u0026#39;ended\u0026#39; return \u0026#39;active\u0026#39; }, getStockPercent(activity) { return ((activity.stock - activity.soldCount) / activity.stock) * 100 }, canParticipate(activity) { return activity.stock \u0026gt; activity.soldCount \u0026amp;\u0026amp; activity.status === 1 }, getButtonText(activity) { const status = this.getActivityStatus(activity) switch (status) { case \u0026#39;not-started\u0026#39;: return \u0026#39;未开始\u0026#39; case \u0026#39;ended\u0026#39;: return \u0026#39;已结束\u0026#39; default: return \u0026#39;立即抢购\u0026#39; } }, getCountdown(endTime) { const now = new Date().getTime() const end = new Date(endTime).getTime() const timeLeft = Math.max(0, end - now) const hours = Math.floor(timeLeft / (1000 * 60 * 60)) const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60)) const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000) return `${hours.toString().padStart(2, \u0026#39;0\u0026#39;)}:${minutes.toString().padStart(2, \u0026#39;0\u0026#39;)}:${seconds.toString().padStart(2, \u0026#39;0\u0026#39;)}` } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .seckill-container { padding: 20rpx; background: #f5f5f5; min-height: 100vh; } .seckill-header { text-align: center; margin-bottom: 30rpx; padding: 30rpx; background: #fff; border-radius: 10rpx; } .title { font-size: 36rpx; color: #f56c6c; font-weight: bold; display: block; margin-bottom: 10rpx; } .subtitle { font-size: 24rpx; color: #909399; } .seckill-item { background: #fff; border-radius: 10rpx; margin-bottom: 20rpx; padding: 20rpx; display: flex; align-items: center; } .product-image { width: 120rpx; height: 120rpx; border-radius: 8rpx; margin-right: 20rpx; } .product-info { flex: 1; } .product-name { font-size: 28rpx; color: #303133; font-weight: bold; display: block; margin-bottom: 10rpx; } .product-desc { font-size: 22rpx; color: #909399; display: block; margin-bottom: 15rpx; } .price-info { display: flex; align-items: center; } .original-price { text-decoration: line-through; color: #909399; font-size: 24rpx; margin-right: 15rpx; } .seckill-price { color: #f56c6c; font-size: 32rpx; font-weight: bold; } .seckill-action { width: 200rpx; text-align: center; } .stock-info { margin-bottom: 15rpx; } .stock-text { font-size: 20rpx; color: #606266; display: block; margin-bottom: 8rpx; } .progress-bar { width: 100%; height: 6rpx; background: #f0f0f0; border-radius: 3rpx; overflow: hidden; } .progress { height: 100%; background: linear-gradient(90deg, #f56c6c, #ff9a9a); transition: width 0.3s ease; } .time-info { margin-bottom: 15rpx; } .countdown { font-size: 20rpx; color: #f56c6c; font-weight: bold; } .ended { font-size: 20rpx; color: #909399; } .seckill-btn { width: 100%; height: 60rpx; background: #f56c6c; color: #fff; border: none; border-radius: 30rpx; font-size: 24rpx; font-weight: bold; } .seckill-btn.disabled { background: #c0c4cc; color: #fff; } \u0026lt;/style\u0026gt; 测试和优化 1. 功能测试 1.1 单元测试 测试秒杀参与逻辑 测试库存扣减 测试并发控制 1.2 集成测试 测试前后端接口 测试数据库操作 测试Redis缓存 1.3 压力测试 模拟高并发场景 测试系统性能 验证防超卖机制 2. 性能优化 2.1 缓存优化 合理设置缓存过期时间 使用缓存预热 避免缓存穿透 2.2 数据库优化 添加必要索引 优化SQL查询 使用连接池 2.3 系统优化 使用异步处理 合理设置线程池 监控系统资源 3. 监控告警 3.1 业务监控 秒杀参与成功率 库存变化趋势 用户参与行为 3.2 系统监控 Redis性能指标 数据库连接数 服务器资源使用 GitHub Pages 部署指南 1. 准备工作 1.1 创建GitHub仓库 1 2 # 在GitHub上创建一个新的仓库，命名为 yin123-ybh.github.io # 或者使用现有的仓库 1.2 克隆仓库到本地 1 2 git clone https://github.com/yin123-ybh/yin123-ybh.github.io.git cd yin123-ybh.github.io 2. 创建博客文章 2.1 创建文章目录结构 1 2 mkdir -p _posts/2024 mkdir -p assets/images 2.2 创建文章文件 1 2 3 4 5 # 将第一部分文章复制到_posts目录 cp \u0026#34;/Users/yin/Downloads/秒杀活动功能完善指南-第一部分.md\u0026#34; \u0026#34;_posts/2024/2024-01-15-秒杀活动功能完善指南-第一部分.md\u0026#34; # 将第二部分文章复制到_posts目录 cp \u0026#34;/Users/yin/Downloads/秒杀活动功能完善指南-第二部分.md\u0026#34; \u0026#34;_posts/2024/2024-01-15-秒杀活动功能完善指南-第二部分.md\u0026#34; 2.3 添加Jekyll Front Matter 在每个Markdown文件开头添加：\n1 2 3 4 5 6 7 8 --- layout: post title: \u0026#34;秒杀活动功能完善指南 - 第一部分\u0026#34; date: 2024-01-15 10:00:00 +0800 categories: [技术, 后端开发, 秒杀系统] tags: [Spring Boot, Redis, 分布式锁, 高并发] author: yin123-ybh --- 3. 配置Jekyll 3.1 创建_config.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # 文件路径: _config.yml title: \u0026#34;Yin123的技术博客\u0026#34; description: \u0026#34;分享技术心得，记录成长历程\u0026#34; author: \u0026#34;yin123-ybh\u0026#34; email: \u0026#34;your-email@example.com\u0026#34; # 网站设置 url: \u0026#34;https://yin123-ybh.github.io\u0026#34; baseurl: \u0026#34;\u0026#34; # 构建设置 markdown: kramdown highlighter: rouge theme: minima # 插件 plugins: - jekyll-feed - jekyll-sitemap - jekyll-seo-tag # 分页 paginate: 5 paginate_path: \u0026#34;/page:num/\u0026#34; # 社交链接 github_username: yin123-ybh twitter_username: your_twitter 3.2 创建index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;!-- 文件路径: index.html --\u0026gt; --- layout: default --- \u0026lt;div class=\u0026#34;home\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;page-heading\u0026#34;\u0026gt;最新文章\u0026lt;/h1\u0026gt; \u0026lt;ul class=\u0026#34;post-list\u0026#34;\u0026gt; {% for post in site.posts %} \u0026lt;li\u0026gt; \u0026lt;span class=\u0026#34;post-meta\u0026#34;\u0026gt;{{ post.date | date: \u0026#34;%Y-%m-%d\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;h2\u0026gt; \u0026lt;a class=\u0026#34;post-link\u0026#34; href=\u0026#34;{{ post.url | relative_url }}\u0026#34;\u0026gt;{{ post.title }}\u0026lt;/a\u0026gt; \u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;{{ post.excerpt | strip_html | truncate: 200 }}\u0026lt;/p\u0026gt; \u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; 4. 部署到GitHub Pages 4.1 提交代码 1 2 3 git add . git commit -m \u0026#34;添加秒杀活动功能完善指南\u0026#34; git push origin main 4.2 启用GitHub Pages 进入GitHub仓库设置页面 找到\u0026quot;Pages\u0026quot;选项 选择\u0026quot;Deploy from a branch\u0026quot; 选择\u0026quot;main\u0026quot;分支 选择\u0026quot;/ (root)\u0026ldquo;文件夹 点击\u0026quot;Save\u0026rdquo; 4.3 访问博客 等待几分钟后，访问：https://yin123-ybh.github.io\n5. 自定义主题（可选） 5.1 使用Jekyll主题 1 2 3 4 5 # 添加主题到Gemfile echo \u0026#34;gem \u0026#39;minima\u0026#39;\u0026#34; \u0026gt;\u0026gt; Gemfile # 或者使用其他主题 echo \u0026#34;gem \u0026#39;jekyll-theme-clean-blog\u0026#39;\u0026#34; \u0026gt;\u0026gt; Gemfile 5.2 自定义样式 创建_sass/custom.scss文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 自定义样式 .post-content { h1, h2, h3, h4, h5, h6 { color: #2c3e50; margin-top: 2em; margin-bottom: 1em; } code { background-color: #f8f9fa; padding: 2px 4px; border-radius: 3px; } pre { background-color: #f8f9fa; padding: 1em; border-radius: 5px; overflow-x: auto; } } 6. 自动化部署 6.1 使用GitHub Actions 创建.github/workflows/jekyll.yml：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 name: Jekyll site CI on: push: branches: [ main ] pull_request: branches: [ main ] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Setup Ruby uses: actions/setup-ruby@v1 with: ruby-version: \u0026#39;2.7\u0026#39; - name: Install dependencies run: | gem install bundler bundle install - name: Build site run: bundle exec jekyll build - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./_site 总结 第二部分涵盖了秒杀活动功能的完整实现，包括：\n前端界面开发 - Vue.js管理界面和用户界面 微信小程序集成 - 移动端秒杀功能 测试和优化 - 功能测试和性能优化 GitHub Pages部署 - 完整的博客部署指南 通过这两部分指南，你可以：\n掌握高并发秒杀系统的核心技术 学会前后端分离开发 了解微信小程序开发 搭建个人技术博客 按照指南逐步实现，你就能构建出一个完整的秒杀活动系统，并将技术心得分享到博客上！\n返回阅读：秒杀活动功能完善指南 - 第一部分\n","date":"2025-01-12T00:00:00Z","permalink":"https://Yin123-ybh.github.io/p/%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/","title":"秒杀活动功能完善指南 - 第二部分"}]